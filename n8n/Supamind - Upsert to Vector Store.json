{
  "name": "Supamind - Upsert to Vector Store",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "19566c6c-e0a5-4a8f-ba1a-5203c2b663b7",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2592,
        96
      ],
      "id": "f2c1ed3f-07c6-4960-bb7b-0a7c403dfa32",
      "name": "Webhook",
      "webhookId": "19566c6c-e0a5-4a8f-ba1a-5203c2b663b7",
      "credentials": {
        "httpHeaderAuth": {
          "id": "gvJYxh53ckvIJCGJ",
          "name": "Webhook Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        96,
        96
      ],
      "id": "fec1dc95-2d77-4ade-926c-d0cdab058b19",
      "name": "Supabase Vector Store",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "notebook_id",
                "value": "={{ $('Code').item.json.notebook_id }}"
              },
              {
                "name": "source_id",
                "value": "={{ $('Code').item.json.source_id }}"
              },
              {
                "name": "user_id",
                "value": "={{ $('Code').item.json.user_id }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        192,
        336
      ],
      "id": "7707c143-3d6b-4789-afd7-c0d2a1ba2149",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkOverlap": 200,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        288,
        528
      ],
      "id": "624dd068-388b-47a8-a10e-94da49b58893",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dab34521-ffef-41db-9eb3-8985fd108466",
              "name": "text",
              "value": "={{ $('Code').item.json.extracted_text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -144,
        96
      ],
      "id": "e91791e1-4fe3-405a-8a2c-5cf8c757583c",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// Handle both notebook sources and feed sources\nlet notebook_id = null;\nlet source_id;\nlet user_id;\nlet context;\n\ntry {\n  const webhookData = $('Webhook').first();\n  if (webhookData && webhookData.json?.body) {\n    const body = webhookData.json.body;\n    source_id = body.source_id;\n    user_id = body.user_id;\n    context = body.context;\n    \n    // Check if this is explicitly a feed source\n    if (context === 'feed') {\n      // Explicit feed source - notebook_id stays null\n      notebook_id = null;\n    } else if (!context && !body.notebook_id) {\n      // Implicit feed source: no context and no notebook_id provided\n      notebook_id = null;\n    } else if (body.file_path) {\n      // Extract notebook_id from file path for notebook sources\n      const path = body.file_path;\n      notebook_id = path.split('/')[0];\n    }\n  }\n} catch (e) {\n  // Fallback: get from input (for backwards compatibility)\n  const input = $input.first().json;\n  notebook_id = input.notebook_id || null;\n  source_id = input.source_id;\n  user_id = input.user_id;\n}\n\nconst extracted_text = $input.first().json.extracted_text;\n\n// Explicitly construct the return object to ensure notebook_id is always included\nconst returnData = {\n  notebook_id: notebook_id,\n  extracted_text: extracted_text,\n  source_id: source_id,\n  user_id: user_id\n};\n\nreturn [\n  {\n    json: returnData\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2160,
        96
      ],
      "id": "23e1764e-3221-4d96-8b1f-45910dc197ce",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ehqdibhqhevjnknojogm.supabase.co/functions/v1/process-document-callback",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-webhook-signature",
              "value": "={{ $json.signature }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"source_id\": \"{{ $('Code').item.json.source_id }}\",\n  \"status\": \"completed\"\n}\n",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1152,
        96
      ],
      "id": "f9869778-6c45-40c4-8856-cb849fb1cead",
      "name": "HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"title\": \"<ADD>\",\n\t\"summary\": \"<ADD>\",\n    \"category\": [\"Category1\", \"Category2\"],\n    \"short_description\": \"<ADD>\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1728,
        336
      ],
      "id": "f0b5d7dd-edb9-4dd6-ba2c-e97cb463cab1",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "ZWr97cxmECcUvIif",
          "mode": "list",
          "cachedResultName": "InsightsLM - Extract Text"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "filePath": "={{ $json.body.file_path }}"
          },
          "matchingColumns": [
            "filePath"
          ],
          "schema": [
            {
              "id": "filePath",
              "displayName": "filePath",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -2384,
        96
      ],
      "id": "f2faba20-bd91-4acb-8070-f03de1a0b91b",
      "name": "Extract Text"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "notebook_id"
            },
            {
              "name": "extracted_text"
            },
            {
              "name": "source_id"
            },
            {
              "name": "user_id"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2592,
        -160
      ],
      "id": "f88bd6e5-b4ea-4e6d-98a5-e75abb5a2225",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        464,
        96
      ],
      "id": "c278269d-ed4f-4826-9263-f60820fa7278",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "content": "## To Do \n- Configure the Supabase nodes to reference your Project\n- Configure \"Extract Text\" to hit the correct workflow\n- Update the Host of the \"HTTP Request\" to hit your project",
        "width": 580,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1136,
        -192
      ],
      "id": "e09064cf-4c04-45da-b73a-e5a7eed25d87",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1856,
        336
      ],
      "id": "307e335f-6517-4902-93d9-02481bfb3b3e",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        64,
        336
      ],
      "id": "8395d4a0-2eeb-4252-9f8b-4b828932f07b",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  p.summary_prompt,\n  p.deep_dive_prompt,\n  p.categorization_prompt,\n  ARRAY_AGG(uc.name) as category_names\nFROM profiles p\nLEFT JOIN user_categories uc ON p.id = uc.user_id\nWHERE p.id = '{{ $('Code').item.json.user_id }}'\nGROUP BY p.id, p.summary_prompt, p.deep_dive_prompt, p.categorization_prompt;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1920,
        96
      ],
      "id": "3c77acb4-b6dd-49f2-b009-655b579513eb",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "loHyKG67vLMDy8GM",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Content: {{ $('Code').item.json.extracted_text }}\n\nUser Prefrences: {{ $('Execute a SQL query').item.json.deep_dive_prompt }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "You are an expert analyst creating strategic deep dive analyses. Extract meaningful implications and actionable takeaways that answer \"so what?\" - not summaries.\n\n## Inputs\n1. **Main Content**: Article or transcript text\n2. **User Preferences** (optional): Customization requirements\n\n## Analysis Requirements\n\n**Include:**\n- Strategic implications and opportunities\n- Tactical takeaways and hidden insights\n- Second-order effects and trend connections\n- Risks, challenges, and recommendations\n- Clear \"so what?\" answers with actionable value\n\n**Exclude:**\n- Summaries or obvious restatements\n- Generic observations without strategic value\n- Filler content\n\n## User Customization\nWhen preferences provided:\n- **Expert Perspectives** (CMO, CDO, CPO, Executive Coach): Only include if genuinely relevant. Frame authentically from that role's viewpoint.\n- Adapt style/focus based on other preferences while maintaining strategic depth.\n\n## Output Requirements\n\n**Format:** JSON only\n{\n    \"deep_dive\": \"<your markdown-formatted analysis>\"\n}\n\nLength: 300-600 words (prefer brevity)\n\n200-300 words: Default for straightforward content\n400-500 words: Multi-faceted topics with 3-5 insights\n500-600 words: Only for complex content with cascading implications\n\nMarkdown Structure:\n## for main headers\n### for subheaders\n**bold** for emphasis\nLine breaks: \\n\\n between paragraphs and around headers\nShort paragraphs (3-4 sentences)\n\n## Quality Standards\n\nEvery point must pass \"so what?\" test\nLead with most important insight\nConnect tactics to strategy\nEnd with concrete next steps\nPowerful 500 words > padded 1000 words\n\nOutput valid JSON only. Add significant value beyond the content itself."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -1392,
        96
      ],
      "id": "c197cc39-4a62-468e-ba01-bdb91d868808",
      "name": "Generate Content Deep Dive"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"deep_dive\": \"<ADD>\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1232,
        336
      ],
      "id": "70664ce1-e2fa-468c-8f42-3833c54e9ec2",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Content: {{ $('Code').item.json.extracted_text }}\nCategories: {{ $json.category_names }}\nCategorization user preferences: {{ $json.categorization_prompt }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a content summarizer and categorizer. Create a clear title, short description, comprehensive summary, and accurate categorization of the provided content.\n\n## Inputs\n1. **Content**: The text to summarize\n2. **Categories**: Array of available categories\n3. **User Preferences** (optional): Categorization guidance\n\n## Summary Requirements\n- **Length**: 150-300 words (1-2 minute read)\n- **Style**: Clear, objective, and informative\n- **Structure**: Logical flow from main idea to supporting points\n- **Format**: Use markdown formatting with double line breaks between paragraphs\n- **Coverage**: Include all key points, data, and conclusions\n\n## Short Description Requirements\n- Concise and descriptive\n- Maximum of 140 characters\n\n## Title Requirements\n- Descriptive and specific (not clickbait)\n- 5-12 words ideal length\n- Captures the core topic/finding\n\n## Categorization Requirements\n- **Select ONLY from provided categories array**\n- **Maximum 2 categories** (prefer 1 if highly relevant)\n- **Quality over quantity**: Only select categories with strong content fit\n- **User preferences**: If categorization guidance provided, follow it while maintaining accuracy\n\n## What to Include in Summary\n- Main thesis or central argument\n- Key supporting points and evidence\n- Important data, statistics, or findings\n- Notable conclusions or recommendations\n- Context necessary for understanding\n\n## What to Avoid\n- Personal opinions or interpretations\n- Excessive detail or minor points\n- Categories not in the provided list\n- Forcing categories that don't fit well\n\n## Output Format\nReturn ONLY valid JSON:\n{\n    \"title\": \"Your title here\",\n    \"summary\": \"Your summary here\",\n    \"category\": [\"Category1\", \"Category2\"],\n    \"short_description\": \"Your description here\"\n}\n\nFocus on WHAT the content says. Select categories that best represent the content's primary themes."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -1744,
        96
      ],
      "id": "95c15939-fb29-44e6-9aa0-dd92dc3e9f95",
      "name": "Generate Title, Category & Summary"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1344,
        336
      ],
      "id": "7272b9f4-3fc1-4dd0-ade4-d4300097a179",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "sources",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Code').item.json.source_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "content",
              "fieldValue": "={{ $('Code').item.json.extracted_text }}"
            },
            {
              "fieldId": "summary",
              "fieldValue": "={{ $('Generate Title, Category & Summary').item.json.output.summary }}"
            },
            {
              "fieldId": "display_name",
              "fieldValue": "={{ $('Generate Title, Category & Summary').item.json.output.title }}"
            },
            {
              "fieldId": "deep_summary",
              "fieldValue": "={{ $json.output.deep_dive }}"
            },
            {
              "fieldId": "category",
              "fieldValue": "={{ $('Generate Title, Category & Summary').item.json.output.category }}"
            },
            {
              "fieldId": "short_description",
              "fieldValue": "={{ $('Generate Title, Category & Summary').item.json.output.short_description }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -912,
        96
      ],
      "id": "76675d7e-bc47-4c9d-ad44-d9944113f3de",
      "name": "Update a row",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-nano",
          "mode": "list",
          "cachedResultName": "gpt-5-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1216,
        496
      ],
      "id": "88892e30-060b-4361-bb68-afe73373b79f",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Title: {{ $json.title }}\nURL: {{ $json.url }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Analyze the provided web article URL and title to identify the publisher name or company behind the article.\n\nTASK: Extract the publisher name from the URL domain, subdomain, or any publisher information visible in the title. Use your knowledge of news organizations and websites to identify the correct publisher name.\n\nOUTPUT: Return only valid JSON in this exact format:\n{\"publisher_name\": \"Publisher Name\"}\n\nExamples:\n- For cnn.com → {\"publisher_name\": \"CNN\"}\n- For techcrunch.com → {\"publisher_name\": \"TechCrunch\"}\n- For nytimes.com → {\"publisher_name\": \"The New York Times\"}"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -528,
        176
      ],
      "id": "36bf9747-c7fc-4971-be60-688d0c88b6cb",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"publisher_name\": \"<ADD>\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -368,
        384
      ],
      "id": "7bb1ff91-7b53-4c99-bbe4-ac8493cbb3f2",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -512,
        384
      ],
      "id": "175bdee0-ee55-4e45-aab6-5090a78f6693",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0507a693-4654-43fd-9e3d-c1c2eef589b0",
                    "leftValue": "={{ $json.url }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "notExists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "No URL"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.url }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "27efcbe1-8fcb-42c6-8434-f87713a420a8"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "URL"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -704,
        96
      ],
      "id": "ce69355f-b600-457b-bc52-00f3adabeafa",
      "name": "Switch"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-nano",
          "mode": "list",
          "cachedResultName": "gpt-5-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1712,
        496
      ],
      "id": "e99edf8a-bbd9-48c1-8c6b-cebd3ae95a0b",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "7919085089",
        "text": "=Supamind Source Added\n\nUser: {{ $('Execute a SQL query1').item.json.full_name }}\nTitle: {{ $('Update a row').item.json.title }}\nURL: {{ $('Update a row').item.json.url }}\nSource ID: {{ $('Update a row').item.json.id }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1632,
        96
      ],
      "id": "544f594b-745a-458e-b39e-215c349664cb",
      "name": "Send a text message",
      "webhookId": "1b714c8b-0f25-4bde-aa0c-7e8da0ec1b72",
      "credentials": {
        "telegramApi": {
          "id": "LEiEsL0XzYtYlFrf",
          "name": "Telegram account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT full_name\nFROM profiles\nWHERE id = '{{ $('Code').item.json.user_id }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1408,
        96
      ],
      "id": "298e3abb-42a3-4bea-ab56-d95dabc751ef",
      "name": "Execute a SQL query1",
      "credentials": {
        "postgres": {
          "id": "loHyKG67vLMDy8GM",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -336,
        544
      ],
      "id": "41073249-af05-4505-bd71-56c93e48123f",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get source_id from the 'Code' node output\nconst sourceId = $('Code').item.json.source_id;\n\n// Build the payload that will be sent\nconst payload = JSON.stringify({\n  source_id: sourceId,\n  status: \"completed\"\n});\n\n// Return the data with the payload to be signed\nreturn {\n  json: {\n    source_id: sourceId,\n    status: \"completed\",\n    payload_to_sign: payload\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        96
      ],
      "id": "58222026-ba51-44ac-a280-d6408ba712da",
      "name": "Code1"
    },
    {
      "parameters": {
        "action": "hmac",
        "type": "SHA256",
        "value": "={{ $json.payload_to_sign }}",
        "dataPropertyName": "signature",
        "secret": "={{ $env.WEBHOOK_SECRET }}"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        880,
        96
      ],
      "id": "5eb43a34-c953-4bf7-85ca-71a85e336e1a",
      "name": "Crypto"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n-railway-production-519d.up.railway.app",
            "user-agent": "Deno/1.45.2 (variant; SupabaseEdgeRuntime/1.68.3)",
            "content-length": "521",
            "accept": "*/*",
            "accept-encoding": "gzip, br",
            "accept-language": "*",
            "authorization": "xXoFdKtnFp2f4VpcHPGN3e3XFNBi6u",
            "content-type": "application/json",
            "x-forwarded-for": "18.197.179.224",
            "x-forwarded-host": "n8n-railway-production-519d.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-edge": "railway/europe-west4-drams3a",
            "x-railway-request-id": "3oJjgi03QgW4pQqL5nX1uw",
            "x-real-ip": "18.197.179.224",
            "x-request-start": "1754902721027"
          },
          "params": {},
          "query": {},
          "body": {
            "source_id": "3e77afdf-0a58-4371-9c25-eea67f2f0be4",
            "file_url": "https://ehqdibhqhevjnknojogm.supabase.co/storage/v1/object/public/sources/feed/4959cdf4-1e51-4515-af96-d6968f47db0d/3e77afdf-0a58-4371-9c25-eea67f2f0be4.pdf",
            "file_path": "feed/4959cdf4-1e51-4515-af96-d6968f47db0d/3e77afdf-0a58-4371-9c25-eea67f2f0be4.pdf",
            "source_type": "pdf",
            "user_id": "4959cdf4-1e51-4515-af96-d6968f47db0d",
            "notebook_id": null,
            "context": "feed",
            "callback_url": "https://ehqdibhqhevjnknojogm.supabase.co/functions/v1/process-document-callback"
          },
          "webhookUrl": "https://n8n-railway-production-519d.up.railway.app/webhook/19566c6c-e0a5-4a8f-ba1a-5203c2b663b7",
          "executionMode": "production"
        }
      }
    ],
    "When Executed by Another Workflow": [
      {
        "json": {
          "extracted_text": "We use cookies to personalize and deliver appropriate content. By clicking \"Accept\" you agree to the Reforge Privacy Policy\n\n[Skip to Content](https://www.reforge.com/blog/ai-pricing-myths#content)\n\n[AI](https://www.reforge.com/blog/category/ai)\n5 AI Pricing Myths Masquerading as Conventional Wisdom\n------------------------------------------------------\n\n![Image 1: Brian Balfour](https://dz6zxzyiqnxk9.cloudfront.net/uploads/1xat0khz69610r0euohh9zjeqxbj)\n\n#### Brian Balfour\n\nBrian is the Founder and CEO of Reforge. Most recently, he was the VP of Growth @ HubSpot. Prior to HubSpot, he was an EIR @ Trinity Ventures and founder of Boundless Learning (acq by Valore) and Viximo (acq by Tapjoy). He advises companies including Blue Bottle Coffee, Gametime, Lumoid, GrabCAD, and Help Scout on growth and customer acquisition.\n\n[Learn More](https://www.reforge.com/profiles/brian-balfour)\n\n[_The following post is excerpted from our AI Growth series. You can learn more and join the waitlist here._](https://www.reforge.com/courses/ai-growth)\n\n---\n\nHow are companies actually making money selling AI software?\n\nCustomer demand for AI is insanely high, but that doesn’t automatically translate into profit or sustainable businesses. Depending on how you price your product, you can turn that demand into high gross margins and happy customers, or broken unit economics that quickly lead to unprofitability.\n\nEven the biggest and most successful companies of this era are still figuring how to price their products. Cursor, which reached $100m ARR in 12 months, recently had to change their pricing three times in two months because power users were burning through $500+ in compute costs while paying $20/month.\n\n### **Pricing changed overnight. What happened?**\n\nClaude [rolled out](https://techcrunch.com/2025/07/28/anthropic-unveils-new-rate-limits-to-curb-claude-code-power-users/) pricing changes in summer 2025 when it discovered 5% of users were generating usage costs that far exceeded their subscription revenue.\n\nWhen Replit launched its AI coding assistant, heavy users burned through compute costs so quickly that the company had to implement emergency usage caps within weeks. What used to be a manageable loss-leader strategy became a threat to cash flow.\n\n[Traditional SaaS pricing](https://www.reforge.com/blog/pricing-strategy) relied on a fundamental economic principle: build software once, then serve it to customers at essentially zero marginal cost. A Slack message, a Figma design file, or a Salesforce record cost virtually nothing to process after the initial development. This predictable cost structure enabled the \"unlimited usage\" promises that defined SaaS pricing for two decades.\n\nAI breaks this. A simple chatbot response might cost fractions of a penny, while a complex document analysis could cost several dollars. Same customer, same feature, wildly different costs.\n\nThese changes happened virtually overnight as AI capabilities exploded into mainstream consciousness. Companies that built their entire business models around predictable costs and unlimited usage promises now find themselves scrambling to rebuild their pricing strategies before variable costs destroy their unit economics.\n\n5 AI pricing myths masquerading as conventional wisdom\n------------------------------------------------------\n\nWe've seen some pricing ideas floating around social media that look and sound good. This makes them _feel_ true. But the dust won’t settle for another year or two, and in the meantime most companies are still figuring out how to price their products in a way that customers are comfortable with while still generating strong gross margins.\n\nThere is no conventional wisdom around AI pricing just yet. Here are the most common misconceptions that you have to be aware of.\n\n### **Myth #1: AI will drive software prices to zero**\n\nThe logic seems sound. If anyone can vibe code DocuSign in a weekend with AI, or if Klarna claims they can replace Salesforce with homegrown tools, why pay for software at all?\n\nBut this isn’t how it’s playing out because software TAM is increasing massively. Where SaaS products are used by people to handle parts of a workflow, AI tools are increasingly able to handle entire workflows on their own. Software is covering a growing surface area.\n\nAI can be positioned both as a massive productivity enhancer and in some cases, a replacement for human labor. Instead of $50/month seats, AI companies are thinking about how to price if their tools enhance an employee’s productivity 5x or eliminate the human component altogether. These companies want to tap into labor budgets, not just software budgets.\n\nAs an example, Intercom Fin charges $0.99 per AI resolution for customer support tickets. Traditional human agents cost companies around $10 per ticket resolution. Fin resolves 60% of tickets autonomously, delivering massive cost savings while generating more revenue per interaction than it could earn with traditional seat-based pricing. ([As of August 2025](https://x.com/eoghan/status/1957516747323646009), Fin resolves more than 1 million tickets per week.)\n\n### **Myth #2: Falling LLM costs will eventually fix unit economics**\n\nThe assumption is that you can break even today and achieve massive margins as model costs plummet. But while older model costs decrease, cutting-edge models maintain premium pricing because customers consistently choose the highest quality available. When Claude 3 Opus launched at higher pricing, users switched from GPT-4 despite price cuts on OpenAI’s older model.\n\nAs TextQL founder Ethan Ding [wrote on Substack](https://ethanding.substack.com/p/ai-subscriptions-get-short-squeezed):\n\n> > When you're spending time with an AI—whether coding, writing, or thinking—you always max out on quality. Nobody opens Claude and thinks, \"you know what? let me use the sh*tty version to save my boss some money.\n\nMore critically, AI usage patterns consume exponentially more tokens. Agentic workflows now burn 100x more tokens than simple text generation.\n\nAnd we are still early in this trend. Studies from nonprofit [AI research organization METR](https://metr.org/blog/2025-03-19-measuring-ai-ability-to-complete-long-tasks/) found that current models can easily handle tasks that take humans less than four minutes to do without AI. When given complex, multi-step tasks that take humans more than four hours, AI succeeds only about 10% of the time.\n\n_Source: [METR](https://metr.org/blog/2025-03-19-measuring-ai-ability-to-complete-long-tasks/)_\n\nBut it also found that the length of tasks that AI can handle—which is a proxy for complexity and token usage—is doubling every seven months. The trend suggests that AI will eventually handle work that currently takes humans days, weeks or even months.\n\nThe formula looks like this:\n\n`Users want the best model` *\n\n`Increasing token usage for new use cases` =\n\n`rising LLM costs`\n\n### **Myth #3: Outcome-based pricing is the universal solution**\n\nChargeflow is an example of company where outcome-based pricing is a perfect fit for the business. It integrates with payment platforms to manage fraudulent chargebacks end-to-end with no subscription fee. Instead, they take 25% of recovered funds.\n\nBut [research from Kyle Poyar](https://www.growthunhinged.com/p/2025-state-of-b2b-monetization) shows only 5% of companies currently use outcome-based pricing successfully. It only works under specific conditions where you can reliably measure and attribute outcomes. AI does enable outcome-based pricing in a way that SaaS mostly couldn’t, but it will never be a universal solution.\n\n### **Myth #4: Market leaders have it figured out**\n\nIt's natural to look at the biggest and most successful companies for guidance. Many assume that AI market leaders like OpenAI or Cursor have cracked the pricing code.\n\nEven market leaders are experimenting heavily. OpenAI CEO Sam Altman [openly admits](https://fortune.com/2025/01/07/sam-altman-openai-chatgpt-pro-subscription-losing-money-tech/) that the company doesn't fully understand customer value or internal costs by customer segment. As of early 2025, OpenAI was losing money on its $200/month ChatGPT Pro offering.\n\nSalesforce's AgentForce launched at $2 per conversation plus additional costs for AI needed to resolve those conversations. Customers weren’t able to forecast costs and Salesforce quickly moved to offer a new pricing model based on Flex Credits, which is a much more granular way to measure AI usage.\n\nThere’s a lot to learn from the way large companies price AI products, but copying them isn’t the answer.\n\n### **Myth #5: All traditional pricing principles are dead**\n\nThe excitement around AI capabilities has led many to believe that traditional monetization frameworks no longer apply. The thinking goes that AI is so fundamentally different that you need entirely new approaches to pricing.\n\n[Core pricing principles](https://www.reforge.com/guides/define-your-pricing-strategy) remain constant while tactics evolve. Customers still need to perceive value exceeding price. [Growth loops](https://www.reforge.com/blog/growth-loops) still require monetization models that enable rather than disable viral mechanics. Unit economics still determine business viability. What's changed is how these principles get applied in practice with variable costs and new customer behaviors.\n\nUnderstanding these myths helps you approach AI pricing with the right foundation rather than chasing trends that may not fit your specific situation.\n\n**An evergreen pricing framework: The Monetization Triad**\n----------------------------------------------------------\n\nKyle Poyar’s research found that hybrid pricing models are on the rise [and that](https://www.growthunhinged.com/p/2025-state-of-b2b-monetization) “hybrid pricing is a natural evolution from seats or flat-rate subscriptions.”\n\nBut don’t jump ahead and just borrow a pricing model from a company like Clay. Your pricing sits at the center of three forces that determine success or failure. Traditional software companies like Netflix, Spotify, and Zoom succeeded because they aligned all three components. AI makes this alignment both more critical and more challenging.\n\nOnce you’ve dispelled the above myths, use the monetization triad to decide how to price your product.\n\n### **1. Customer view: What customers value and will pay for**\n\nThis represents how users think about value and what they're willing to pay. While companies focus on revenue targets and competitive benchmarks, customers make decisions based on perceived value versus perceived price.\n\nAI has created a psychological paradox. Customers simultaneously expect magic while forgiving mistakes, pay premium prices while fearing costs, and desperately seek solutions while constantly shopping for alternatives.\n\nMost companies struggle with the customer view for three reasons:\n\n*   Decision makers are often distant from actual customers\n*   It's hard to understand audiences we don't personally relate to\n*   Getting accurate customer insights requires time-intensive qualitative research (as a side note, this is exactly why we built [Reforge Insights](https://www.reforge.com/insights))\n\nAnd that’s before factoring in new dynamics like inflated expectations of AI tools, low loyalty, low switching costs, and anxiety around how credits or tokens translate into dollars.\n\n### **2. Growth loops: How monetization feeds growth**\n\nWe’ve written extensively about [growth loops](https://www.reforge.com/blog/growth-loops). Monetization and pricing are important both as inputs and outputs. Zoom's viral loop illustrates this perfectly. Users host meetings, invite attendees, and some attendees convert to hosts themselves. Zoom's free plan removes friction between these steps. If they required payment upfront, fewer attendees would convert to hosts and acquisition would never have grown like it did.\n\nBut AI products are working with a new set of dynamics:\n\n*   **Freemium costs** - Viral and content loops typically need freemium models. This worked when free user costs were negligible. AI can shift freemium costs from negligible to significant, exploding CAC and margins.\n*   **Data network effects** - These effects are primary AI defensibility, but they're driven by usage. The more AI features you lock behind paywalls, the less usage you get, weakening the network effect.\n*   **Bundling vs. forking** - Bundling AI features into existing plans leads to higher adoption but margin pressure. Forking might improve monetization per user but lower AI feature adoption.\n\n### **3. Cost of revenue: The economics of sustainability**\n\nIf it costs too much to create and serve revenue, you don't have a viable business. Cost of revenue includes both cost to serve (margins) and cost to acquire (CAC, payback period). This has always been true but SaaS costs were both low and predictable. AI blows this up.\n\nThe shift from predictable to variable costs represents the most dramatic change in software economics since the move to cloud. Traditional SaaS enjoyed 80-90% gross margins with predictable scaling. AI companies celebrate 50-60% gross margins while worrying that single power users could destroy their economics.\n\nAI changes cost of revenue in four ways:\n\n*   **High variance per user** - The cost to serve individual users varies dramatically based on usage complexity\n*   **Low predictability** - It's difficult to predict usage and cost curves before launching new AI features\n*   **External dependencies** - Model providers like OpenAI, Anthropic, and Google can change pricing anytime\n*   **Increased acquisition costs** - Customer pilots may cost real money to run with actual user data\n\nThe promise of decreasing AI costs provides false comfort. While API prices dropped 90% in two years, usage has grown faster. Models get cheaper but customers expect more sophisticated applications. What once required one API call now needs ten for competitive experience.\n\n### Now is the right time to re-assess your pricing\n\nPricing a software product has always been complex. AI has created some new dynamics, like variable costs, that most companies are dealing with for the first time. On the other side, customers still have a wide range of perceived value. The confluence of variables makes it a great time to review your pricing to make sure it’s aligned both with the value it offers customers and the value customers perceive that it delivers.\n\nPricing and monetization are a significant part of our upcoming [AI Growth course](https://www.reforge.com/courses/ai-growth). It’s a massive overhaul of our 10-year old Growth course, which has been taken by thousands of product builders and has been a staple of our business for a decade now. [You can join the waitlist here.](https://www.reforge.com/courses/ai-growth)\n\n[Brian Balfour](https://www.reforge.com/profiles/brian-balfour)\n\n![Image 2: Reforge-Fullmark-White-1.png](https://a.omappapi.com/users/e1e2c9fb5083/images/0d8768828b761664388974-Reforge-Fullmark-White-1.png?width=364)\n\nChallenge the status quo.\n\nSign up for expert takes from the top leaders in product and growth, directly in your inbox.",
          "source_id": "424b28d7-1181-43a6-8ded-f3fc84102928",
          "user_id": "ae11b2ca-64c9-4e82-a820-ab3b6a25f9e4"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Title, Category & Summary",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Title, Category & Summary",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Generate Title, Category & Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content Deep Dive": {
      "main": [
        [
          {
            "node": "Update a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Content Deep Dive",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Generate Title, Category & Summary": {
      "main": [
        [
          {
            "node": "Generate Content Deep Dive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Content Deep Dive",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Update a row": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Crypto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crypto": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5017ca60-d775-4c03-8162-38215719d2ea",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f5707d3666ba184efe554775a181f51837c332c4fa57af1133598e1ba699e314"
  },
  "id": "L4jfcqHK5HarmFr8",
  "tags": []
}