{
  "name": "Supamind - Adding new podcast",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ffb3ea75-2216-4158-8f98-b236e87a4ba3",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "e0b33244-87ee-40fa-b7d1-a3aed4fc94d3",
      "name": "Webhook",
      "webhookId": "ffb3ea75-2216-4158-8f98-b236e87a4ba3",
      "credentials": {
        "httpHeaderAuth": {
          "id": "gvJYxh53ckvIJCGJ",
          "name": "Webhook Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "content": "## I'm a note \n1. supamind adding table entry with user_id and rss feed url\n2. webhook call with input: user_id and rss feed url and id\n3. n8n to get remaining data like podcast title, link, description, image\n4. updates database table entry",
        "height": 176,
        "width": 848
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        144,
        -256
      ],
      "typeVersion": 1,
      "id": "6e1f9347-e4e3-4e30-aba7-86bab0be2b62",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "url": "={{ $json.body.rss_feed }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {
          "pagination": {
            "pagination": {
              "paginationMode": "off"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        0
      ],
      "id": "de548c4b-f88c-4652-93ba-b5779f8bf1f7",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "const maxLength = 5000; // Set your character limit\nlet rssContent = $input.item.json.data; // Access the 'data' property\n\nif (rssContent && rssContent.length > maxLength) {\n  let truncated = rssContent.substring(0, maxLength);\n  \n  // Find last complete closing tag to avoid breaking XML\n  let lastClosingTag = Math.max(\n    truncated.lastIndexOf('</item>'),\n    truncated.lastIndexOf('</entry>'),\n    truncated.lastIndexOf('</article>')\n  );\n  \n  if (lastClosingTag > 0) {\n    truncated = truncated.substring(0, lastClosingTag + 7);\n    // Add proper closing tags for RSS\n    truncated += '\\n</channel>\\n</rss>';\n  }\n  \n  rssContent = truncated;\n}\n\nreturn [{ json: { data: rssContent } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        0
      ],
      "id": "ae64d6ff-1900-49ef-8527-864f08636596",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=XML content from a podcast RSS feed HTTP request: {{ $json.data }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "# Podcast RSS Feed Information Extractor\n\n# Podcast RSS Feed Information Extractor\n\nYou will receive XML content from a podcast RSS feed HTTP request. Your task is to extract and output the following podcast information:\n\n## Instructions:\n\n1. **Podcast Title**: \n   - Primary: Look for `<title>` tag at the **channel level** (not from individual episodes)\n   - Alternatives if not found: `<itunes:title>`, `<podcast:title>`, or any other title-related tag at channel level\n   - Do NOT use titles from `<item>` sections as these are episode titles\n\n2. **Podcast Description**: \n   - Primary: Look for `<description>` tag at the **channel level**\n   - Alternatives if not found: `<itunes:summary>`, `<itunes:subtitle>`, `<podcast:description>`, `<summary>`, or any other description-related tag at channel level\n   - Again, focus on channel section, not individual episode items\n\n3. **Podcast Image URL**: \n   - Primary: Look for `<itunes:image>` tag and extract URL from `href` attribute\n   - Alternatives if not found: `<image>` tag (check for `<url>` child or `href` attribute), `<podcast:image>`, `<media:thumbnail>`, or any other image-related tag\n   - Extract the actual URL regardless of the tag structure used\n\n4. **Podcast Link**: \n   - Primary: Look for `<link>` tag at the **channel level** (this typically contains the podcast's website URL)\n   - Alternatives if not found: `<itunes:link>`, `<podcast:link>`, `<atom:link>` (check `href` attribute), or any other link-related tag at channel level\n   - This should be the main website/homepage for the podcast, not episode-specific links\n\n## Search Strategy:\n- Start by looking for the primary/common tags mentioned above\n- If primary tags are not found, search for alternative tags that might contain the same information\n- Always prioritize channel-level tags over item-level tags\n- Be flexible with tag names - different RSS generators may use variations\n\n## XML Structure Context:\n- The main podcast information is in the `<channel>` section\n- Individual episodes are in `<item>` sections within the channel\n- Focus only on channel-level tags, not item-level tags\n\n## Output Format:\nReturn the information in this exact JSON format:\n\n```json\n{\n  \"podcast_title\": \"Title here\",\n  \"podcast_description\": \"Description here\", \n  \"podcast_image_url\": \"Image URL here\",\n  \"podcast_link\": \"Link URL here\"\n}\n```\n\n## Important Notes:\n- Remove any CDATA wrapper text if present (e.g., `<![CDATA[text]]>` should just return \"text\")\n- If any field is not found, use `null` for that value\n- Ensure you're extracting from the correct XML hierarchy level (channel, not item)"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        624,
        0
      ],
      "id": "b60f8efb-56b6-4aa4-83a9-aacc3a7080f4",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"podcast_title\": \"Title here\",\n  \"podcast_description\": \"Description here\", \n  \"podcast_image_url\": \"Image URL here\",\n  \"podcast_link\": \"Link URL here\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        704,
        176
      ],
      "id": "c46c6b8e-912a-4863-81ba-89ecb6072460",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-nano",
          "mode": "list",
          "cachedResultName": "gpt-5-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        704,
        336
      ],
      "id": "4b5b5d76-bb5e-485c-a444-eff2fe02f96d",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-5-mini",
          "mode": "list",
          "cachedResultName": "gpt-5-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        592,
        176
      ],
      "id": "8af2f94b-b065-4664-b313-5f447a58d753",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "podcasts",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Webhook').item.json.body.podcast_id }}"
            },
            {
              "keyName": "user_id",
              "condition": "eq",
              "keyValue": "={{ $('Webhook').item.json.body.user_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "podcast_name",
              "fieldValue": "={{ $json.output.podcast_title }}"
            },
            {
              "fieldId": "description",
              "fieldValue": "={{ $json.output.podcast_description }}"
            },
            {
              "fieldId": "image_url",
              "fieldValue": "={{ $json.output.podcast_image_url }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "completed"
            },
            {
              "fieldId": "link",
              "fieldValue": "={{ $json.output.podcast_link }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        976,
        0
      ],
      "id": "1518bbdc-9ee9-4945-8d00-439903ab9414",
      "name": "Update a row",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "## I'm a note \nWhen a new podcast was added, the podcast episode checker and processor should be called right away. and then once a day via a cron job or so for each user_id. using their own assemblyAI api key.",
        "height": 176,
        "width": 432
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1088,
        -256
      ],
      "typeVersion": 1,
      "id": "5c8d0baf-5c30-4d1f-9e77-47c1bb1bbb96",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "5ip36Kc6l1pyK64i",
          "mode": "list",
          "cachedResultName": "Supamind - Podcast Episode Processor"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $('Webhook').item.json.body.user_id }}",
            "url": "={{ $('Webhook').item.json.body.rss_feed }}",
            "podcast_id": "={{ $('Webhook').item.json.body.podcast_id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "podcast_id",
              "displayName": "podcast_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1184,
        0
      ],
      "id": "4fcafaad-d063-4f63-8cc4-6a68fd70dcc1",
      "name": "Execute Workflow"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n-railway-production-519d.up.railway.app",
            "user-agent": "Deno/2.1.4 (variant; SupabaseEdgeRuntime/1.69.4)",
            "content-length": "196",
            "accept": "*/*",
            "accept-encoding": "gzip,br",
            "accept-language": "*",
            "access-control-allow-headers": "authorization, x-client-info, apikey, content-type",
            "access-control-allow-origin": "*",
            "authorization": "xXoFdKtnFp2f4VpcHPGN3e3XFNBi6u",
            "content-type": "application/json",
            "x-forwarded-for": "18.192.56.102",
            "x-forwarded-host": "n8n-railway-production-519d.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-edge": "railway/europe-west4-drams3a",
            "x-railway-request-id": "0ODwTlifRwSB6Uqu5nX1uw",
            "x-real-ip": "18.192.56.102",
            "x-request-start": "1756806995230"
          },
          "params": {},
          "query": {},
          "body": {
            "podcast_id": "db965fcd-bacc-45f7-8a7d-52a0ab452494",
            "user_id": "ae11b2ca-64c9-4e82-a820-ab3b6a25f9e4",
            "rss_feed": "https://anchor.fm/s/1035b1568/podcast/rss",
            "timestamp": "2025-09-02T09:56:35.140Z"
          },
          "webhookUrl": "https://n8n-railway-production-519d.up.railway.app/webhook/ffb3ea75-2216-4158-8f98-b236e87a4ba3",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Update a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update a row": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9db4cefd-9dae-4051-9470-d6fc3a1b6f66",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f5707d3666ba184efe554775a181f51837c332c4fa57af1133598e1ba699e314"
  },
  "id": "L6nNZM0T0VTaQTTZ",
  "tags": []
}