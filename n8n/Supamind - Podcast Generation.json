{
  "name": "Supamind - Podcast Generation",
  "nodes": [
    {
      "parameters": {
        "command": "if ffmpeg -version > /dev/null 2>&1; then\n  echo \"FFmpeg is installed\"\nelse\n  echo \"FFmpeg is NOT installed\"\nfi\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -528,
        1088
      ],
      "id": "b804e4c1-5f49-4fb6-943b-92f183c302a9",
      "name": "Check is FFMPEG Installed"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "05ef5c0e-fe71-4367-a88d-6ba65b8e4e48",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "=FFmpeg is installed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "3e8219ed-4cfb-4706-b6c0-6cdf4e1d1c3b",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -320,
        1088
      ],
      "id": "3adf9104-7091-4b88-b45b-efdb219c7742",
      "name": "If"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n    \"message\": \"Workflow was started\"\n}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -80,
        1072
      ],
      "id": "54c2c7a8-af45-488e-9439-997d43ca2676",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"error\": \"FFmpeg not installed\",\n  \"code\": \"FFMPEG_NOT_INSTALLED\",\n  \"details\": \"The server requires ffmpeg to be installed\"\n}",
        "options": {
          "responseCode": 500
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -80,
        1280
      ],
      "id": "2b492335-fad2-4981-8c5c-bd790256bddd",
      "name": "Respond with 500 Error"
    },
    {
      "parameters": {
        "content": "## To Do \n- REQUIREMENT: FFMPEG needs to be installed on your server for this workflow to succeed\n- Configure the Supabase nodes to reference your Project\n- Configure your Google Cloud API credentials\n- Update the Host of the \"HTTP Requests\" to hit your project",
        "width": 680,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2048,
        656
      ],
      "id": "73fb9911-4a7c-413b-8bb9-9ec86a3f501e",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "4c4699bc-004b-4ca3-8923-373ddd4a274e",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -832,
        1088
      ],
      "id": "36040655-7e2a-4af2-8524-f0e84fa2c874",
      "name": "Webhook",
      "webhookId": "4c4699bc-004b-4ca3-8923-373ddd4a274e",
      "credentials": {
        "httpHeaderAuth": {
          "id": "gvJYxh53ckvIJCGJ",
          "name": "Webhook Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "sources",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "notebook_id",
              "condition": "eq",
              "keyValue": "={{ $('Webhook').item.json.body.notebook_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        576,
        1200
      ],
      "id": "2bf3e04b-7472-4a31-80e3-c78fb8f742be",
      "name": "Get Sources",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "title,content",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        800,
        1200
      ],
      "id": "30a71143-107d-4c02-a43f-54d972c42437",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c3743cbc-c838-401a-8f65-95a386707ded",
              "name": "prompt",
              "value": "=You'll create a conversational podcast script featuring two hosts discussing the provided source material. The script should sound like an authentic, engaging conversation while ensuring every sentence provides value to the listener.\nHOST PERSONAS\nHost 1 (The Explainer): Knowledgeable but approachable. Uses analogies and breaks down complex concepts. Occasionally gets excited about interesting details.\nHost 2 (The Questioner): Curious and engaged. Asks clarifying questions, expresses genuine reactions, and connects ideas to broader implications.\nCORE DIALOGUE PRINCIPLES\n1. Natural Conversation Flow\n\nStart mid-thought occasionally: \"...and that's exactly why this matters so much\"\nUse incomplete sentences when interrupted: \"But wait, if that's true, then—\" \"Exactly!\"\nInclude thinking pauses: \"So... let me make sure I understand this\"\nNatural segues: \"Speaking of which...\" or \"That actually reminds me...\"\n\n2. Authentic Speech Patterns\n\nContractions always: \"it's\" not \"it is\", \"we've\" not \"we have\"\nFiller phrases sparingly: \"I mean\", \"You know\", \"Actually\"\nSelf-corrections: \"The data shows—well, actually, what it really reveals is...\"\nReal-time reactions: \"Oh wow\", \"Hold on\", \"Wait, what?\"\n\n3. Value-Dense Content\n\nEvery exchange must either:\n\nIntroduce new information\nClarify a complex concept\nConnect ideas in meaningful ways\nProvide concrete examples\nBuild toward key insights\n\n\nNO empty affirmations or repetitive agreements\nReplace \"That's so interesting!\" with \"That's interesting because it changes how we think about...\"\n\nSTRUCTURAL FRAMEWORK\nOpening (30-45 seconds)\nHost 1: [Jump directly into an intriguing observation or question from the source material]\nHost 2: [React with genuine curiosity and expand the thought]\nHost 1: Right, so today we're diving deep into [topic]. We've got [source] that reveals...\nHost 2: [Add context about why this matters now]\nBody Sections\nFor each major point:\n\nHook: Start with the most surprising/important aspect\nExplain: Break it down using analogies or examples\nQuestion: Have Host 2 probe deeper or challenge assumptions\nConnect: Link to broader implications or other concepts\nTransition: Natural bridge to next point\n\nDynamic Elements\n\nInterruptions: Use 2-3 per section when genuine excitement or realization occurs\nBuilding on ideas: \"And what's even more fascinating...\" / \"But here's where it gets really interesting...\"\nDisagreement/Tension: Occasionally include friendly pushback: \"Okay, but doesn't that assume...?\"\n\nSPECIFIC TECHNIQUES\nMaking Complex Ideas Accessible\n\nAnalogies: \"It's like [everyday example]\"\nConcrete numbers: \"To put that in perspective...\"\nReal-world applications: \"So if you're someone who...\"\n\nMaintaining Energy\n\nVary sentence length dramatically\nUse emphasis naturally: \"This completely changes...\"\nExpress genuine surprise: \"I had no idea that...\"\nCreate mini-cliffhangers: \"But then something unexpected happened...\"\n\nAuthentic Reactions\n\n\"Wait, back up a second...\"\n\"Okay, so if I'm following...\"\n\"See, this is what blows my mind...\"\n\"Can we just pause on that for a moment?\"\n\nPACING GUIDELINES\n\nTarget Length: 5-12 minutes of spoken content\n\nSimple/short sources: 5-7 minutes\nMedium complexity: 7-10 minutes\nComplex/lengthy sources: 10-12 minutes\n\n\nQuick exchanges: 2-3 short sentences back and forth for energy\nDeep dives: One host explains for 3-4 sentences while other uses minimal encouragers (\"Right\", \"Mm-hmm\")\nRevelation moments: Slow down, let impact sink in\nTransitions: Quick, natural, forward-moving\n\nLength Calibration\n\n~150-160 words per minute of natural speech\n5 minutes ≈ 750-800 words\n10 minutes ≈ 1,500-1,600 words\n12 minutes ≈ 1,800-1,920 words\nAdjust depth of exploration based on source complexity while maintaining engagement\n\nCOMMON PITFALLS TO AVOID\n❌ Empty praise: \"That's so fascinating!\" (without explaining why)\n❌ Repetitive agreement: Multiple \"Exactly!\" in a row\n❌ Over-explaining: Treating listener like they know nothing\n❌ Perfect grammar: Real people don't speak in complete, perfect sentences\n❌ Linear thinking: Real conversations loop back and build\nENDING (30-45 seconds)\nHost 1: So if we zoom out here... [synthesize main insight]\nHost 2: [Connect to listener's life/broader implications]\nHost 1: [Thought-provoking question or action item]\nHost 2: And on that note... [natural sign-off]\nBoth: Until next time, keep [relevant action verb].\nFINAL CHECKLIST\nBefore finalizing, ensure:\n\n Every exchange advances understanding\n Natural interruptions and incomplete thoughts included\n Complex ideas have concrete examples\n Energy varies throughout (not monotone enthusiasm)\n Genuine moments of discovery/surprise\n Clear value for listener in each section\n\n# SOURCE(S) TO CREATE TRANSCRIPT FROM\n\n{{ JSON.stringify($json.data) }}\n\n# OTHER\n\nIMPORTANT: Only output the transcript and use \\n in between speakers dialog\nIMPORTANT: Your response must start with ...\n\"Please read aloud the following in a podcast interview style:\nHost 1: \"",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1056,
        1200
      ],
      "id": "a12a3968-6929-489f-a497-a837f3c7e13c",
      "name": "Set Prompt"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1312,
        1184
      ],
      "id": "25ae0627-f92b-4fa3-8722-6ce6cb678697",
      "name": "Basic LLM Chain",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1312,
        1344
      ],
      "id": "a805fc31-c265-49cc-8a95-e79ec7311783",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\":[{\n      \"text\": {{ JSON.stringify($json.text) }}\n    }]\n  }],\n  \"generationConfig\": {\n    \"responseModalities\": [\"AUDIO\"],\n    \"speechConfig\": {\n      \"multiSpeakerVoiceConfig\": {\n        \"speakerVoiceConfigs\": [{\n            \"speaker\": \"Joe\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Algenib\"\n              }\n            }\n          }, {\n            \"speaker\": \"Jane\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Kore\"\n              }\n            }\n          }]\n      }\n    }\n  },\n  \"model\": \"gemini-2.5-flash-preview-tts\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1728,
        1184
      ],
      "id": "acf52aa8-77ad-41ba-8b27-66f496be6454",
      "name": "Generate Audio",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "credentials": {
        "googlePalmApi": {
          "id": "0Cl9BqX4cx9pQwrD",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "candidates[0].content.parts[0].inlineData.data",
        "options": {
          "fileName": "audio.pcm",
          "mimeType": "audio/L16"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1952,
        1184
      ],
      "id": "0c297369-7ff9-45f8-be19-83191b69a676",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/tmp/{{ $('Generate Audio').item.json.responseId }}-in.pcm",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2176,
        1184
      ],
      "id": "d6a89506-9cd2-4486-85a1-be20060d5d04",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "command": "=ffmpeg -f s16le -ar 24000 -ac 1 -i /tmp/{{ $('Generate Audio').item.json.responseId }}-in.pcm -codec:a libmp3lame -qscale:a 2 /tmp/{{ $('Generate Audio').item.json.responseId }}-out.mp3"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2416,
        1184
      ],
      "id": "d3f96ec9-2373-4ca7-8282-c078de61b92b",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "fileSelector": "=/tmp/{{ $('Generate Audio').item.json.responseId }}-out.mp3",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2640,
        1184
      ],
      "id": "5d91d055-300e-4a33-b3e9-fac3b25dd3e0",
      "name": "Read/Write Files from Disk1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://ehqdibhqhevjnknojogm.supabase.co/storage/v1/object/audio/{{ $('Webhook').item.json.body.notebook_id}}/{{ $binary.data.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "65a6bb6c-99e1-4e17-ac97-95bf0e23a954",
      "name": "Upload object",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2848,
        1184
      ],
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://ehqdibhqhevjnknojogm.supabase.co/storage/v1/object/sign/{{ $json.body.Key }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"expiresIn\": 2592000\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3056,
        1184
      ],
      "id": "f05a5230-c0c5-4b55-b50c-57b1a3c4df83",
      "name": "Generate Signed URL",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const now = new Date();\n  const tomorrow = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000); // Add 1 day in ms\n  item.json.timestamp = tomorrow.toISOString(); // Compatible with Supabase timestampz\n}\n\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3296,
        1184
      ],
      "id": "8d5764b9-498a-4a73-a62a-69ccb6fa5716",
      "name": "Generate Timestamp for Expires"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "notebooks",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Webhook').item.json.body.notebook_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "audio_overview_url",
              "fieldValue": "=https://ehqdibhqhevjnknojogm.supabase.co/storage/v1/{{ $json.signedURL }}"
            },
            {
              "fieldId": "audio_url_expires_at",
              "fieldValue": "={{ $json.timestamp }}"
            },
            {
              "fieldId": "audio_overview_generation_status",
              "fieldValue": "completed"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3552,
        1184
      ],
      "id": "e549327c-f98e-4119-82b0-92c8e902fd06",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "sources",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.source_ids_array[0] }}"
            },
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.source_ids_array[1] }}"
            },
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.source_ids_array[2] }}"
            },
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.source_ids_array[3] }}"
            },
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $json.source_ids_array[4] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        736,
        928
      ],
      "id": "58602c37-54e8-4b5d-88b6-e6c0cdb6e2b7",
      "name": "Get Sources1",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "title, publisher_name,content",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        896,
        928
      ],
      "id": "9a28d396-9db8-4d41-803d-e0b498b654ad",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c3743cbc-c838-401a-8f65-95a386707ded",
              "name": "prompt",
              "value": "=You'll create a podcast script where two expert hosts take turns presenting comprehensive summaries of different content sources. Each host covers one source at a time, alternating throughout the episode. The tone should be that of a knowledgeable friend sharing fascinating summaries with clear \"so what?\" implications.\n\nCRITICAL: This is a comprehensive yet engaging podcast. While we dive deep into content, every second should deliver value. Start with impact, maintain momentum throughout detailed explanations.\n\nHOST PERSONAS\nBoth Hosts: Expert curators who are genuinely excited about sharing knowledge. They speak with authority but remain approachable, like that friend who always has the most interesting articles to share and knows exactly why they matter. They guide listeners through complex content with clarity and enthusiasm.\n\nSTRUCTURAL FRAMEWORK (COMPREHENSIVE & ENGAGING)\n\nOpening (Max 15 seconds)\nHost 1: Hey there, here are [Number] deep dives coming your way. I'm [name], here with [name].\nHost 2: We're exploring [brief topic area]. Let's jump in.\nOR\nHost 1: Welcome back. I'm [name] with [name]. Today: [ultra-brief topic teaser].\nHost 2: [Number] pieces that'll expand your understanding. Here we go.\n\nContent Presentation Format\n\nFor each content source, the presenting host should:\n\n1. Introduction & Hook (15 seconds)\n- Start with publisher name and source title\n- Provide high-level outline that hooks the listener\n- Give first idea of what the source covers\nExample: \"This comes from [Publisher Name] with the title '[Source Title]'. They're exploring how [high-level topic], uncovering [intriguing angle]. What they found challenges what we thought about [subject].\"\nAlternative: \"[Publisher Name] just released '[Source Title]', and it's a deep dive into [topic]. They're essentially arguing that [main thesis].\"\n\n2. The Core Summary (120-180 seconds)\n- Comprehensive walkthrough of the content\n- Cover ALL relevant key points and ideas\n- Include specifics: numbers, percentages, concrete outcomes\n- Structure as a narrative journey through the article\n- Use transitions like: \"They start by explaining...\" \"Then they dive into...\" \"What's interesting is how they connect...\"\n- Include important context and background\n- Mention methodology if it strengthens understanding\n- Quote key phrases if particularly impactful\n- Address counterarguments or limitations mentioned\nExample flow: \"Let me walk you through this. They begin with [opening point]. The research shows [specific finding with numbers]. But here's where it gets interesting - they discovered [key insight]. This connects to [broader context]. They also found [additional finding], which means [implication]...\"\n\n3. The \"So What?\" (30-120 seconds)\n- Key takeaways clearly articulated\n- Immediate impacts on listeners' lives\n- Bigger picture implications\n- Multiple actionable insights\n- What to remember and why it matters\nStructure: \"So what does this mean for you? First, [immediate application]. Second, [broader implication]. If you're someone who [relevant situation], this fundamentally changes [specific aspect]. The key things to remember: [bullet-point style takeaways]. This shifts our understanding of [field/topic] because [reason].\"\n\n4. The Handoff (5-10 seconds)\n- Quick synthesis: \"So [one-sentence summary]. [Other host], what've you got?\"\n- Direct pass: \"That's [topic 1]. Your turn, [name].\"\n- Fast connection: \"Which brings us to your piece on...\"\n\nTONE AND DELIVERY GUIDELINES\n\nExpert Guide Approach\n- Comprehensive but accessible: \"Let me break this down for you...\"\n- Knowledgeable walkthrough: \"What they're really saying here is...\"\n- Patient explanation: \"To understand this, you need to know...\"\n- Clear signposting: \"There are three main arguments here...\"\n\nLanguage Patterns\n- Guide through complexity: \"Follow me on this journey...\"\n- Build understanding: \"Once you grasp this, the next part makes sense...\"\n- Connect dots: \"This relates back to what we discussed about...\"\n- Highlight significance: \"Don't miss this crucial point...\"\n\nMaking Complex Ideas Accessible\n- Layer information: Start simple, build complexity\n- Use analogies throughout: \"Think of it like...\"\n- Provide context: \"To put this in perspective...\"\n- Summarize periodically: \"So far, we've learned...\"\n\nPACING AND LENGTH\n\nTarget Length: 10-22 minutes total\n- 2 sources: 6-11 minutes\n- 3 sources: 9-17 minutes\n- 4+ sources: 12-22 minutes\n\nPer source: 3-5.5 minutes each\n- Introduction & Hook: 15 seconds\n- Core Summary: 2-3 minutes (120-180 seconds)\n- \"So What?\": 30 seconds-2 minutes (30-120 seconds)\n- Handoff: 5-10 seconds\n\nOpening: Max 15 seconds\nEnding: 20-30 seconds\nSpeaking pace: Measured but engaging\nPauses: Strategic moments for absorption\n\nTRANSITION TECHNIQUES\nBetween sources, create smooth bridges:\n- Thematic connection: \"From [topic 1]'s implications, [Host 2] has something that builds on this...\"\n- Contrast bridge: \"While I covered [angle 1], you found a completely different perspective...\"\n- Natural flow: \"That transformation story sets up your piece perfectly...\"\n\nSPECIFIC PHRASES AND PATTERNS\n\nOpening a segment:\n- Publisher intro: \"[Publisher] published '[Title]', and it's a masterclass in [topic]...\"\n- Context setting: \"To understand '[Title]' from [Publisher], you need to know...\"\n- Thesis statement: \"[Publisher]'s '[Title]' makes a bold claim: [main argument]...\"\n\nWalking through content:\n- \"The authors argue that...\"\n- \"They present three main pieces of evidence...\"\n- \"What struck me most was their point about...\"\n- \"They systematically demonstrate...\"\n- \"The data reveals something unexpected...\"\n\nExplaining significance:\n- \"Here's why this matters to you...\"\n- \"The implications are far-reaching...\"\n- \"This fundamentally changes how we should...\"\n- \"What you need to take away from this...\"\n\nENDING (20-30 seconds)\nHost 1: That's [number] deep dives into [topic area].\nHost 2: We've covered [brief summary of journey]. Links to everything in the show notes.\nHost 1: Until next time, keep exploring!\n\nQUALITY CHECKLIST\nFor each source segment, ensure:\n☑ Publisher and title clearly stated upfront\n☑ Comprehensive coverage of all main points\n☑ Specific data and examples included\n☑ Complex ideas made accessible\n☑ Multiple clear takeaways provided\n☑ Natural narrative flow throughout\n☑ Genuine enthusiasm and expertise conveyed\n☑ Sufficient depth without losing clarity\n\nWHAT TO AVOID\n❌ Rushing through complex ideas\n❌ Skipping important context\n❌ Vague summaries without specifics\n❌ Missing key arguments or evidence\n❌ Superficial treatment of deep content\n❌ Overly and exaggerated bold introduction statements such as \"This article is a masterclass in [Subject]\"\n\n✅ Instead: Guide thoroughly through the material while maintaining engagement\n\nOUTPUT FORMAT\nPlease read aloud the following in a podcast style:\n\nHost 1: [Brief opening - max 15 seconds]\nHost 2: [Quick acknowledgment]\n\nHost 1: [Publisher/Title introduction and hook - 15 seconds]\n[Core summary - 2-3 minutes]\n[So what? - 30 seconds-2 minutes]\n[Handoff]\n\nHost 2: [Publisher/Title introduction and hook - 15 seconds]\n[Core summary - 2-3 minutes]\n[So what? - 30 seconds-2 minutes]\n[Handoff]\n\n[Continue alternating as needed]\n\nEXAMPLE SOURCE SEGMENT:\nHost 1: This comes from Nature Neuroscience with the title 'Digital Detox and Neural Plasticity'. They're investigating whether our smartphones are physically changing our brain structure, and spoiler alert: they absolutely are.\n\nLet me walk you through what they found. The Stanford team scanned 200 participants' brains before and after a 30-day complete digital detox - no smartphones, minimal computer use. They used fMRI imaging to track changes in gray matter density across different brain regions. \n\nInitially, they documented the baseline: heavy smartphone users showed 20% less gray matter in the prefrontal cortex compared to historical data from pre-smartphone era. That's your executive function center - decision-making, impulse control, attention management. But here's where it gets fascinating - after just 30 days offline, participants showed a 15% increase in gray matter in these exact regions. That's comparable to the neural growth from intensive language learning.\n\nThey also tracked the amygdala - your brain's alarm system. Heavy users started with enlarged amygdalas, indicating chronic stress response. Post-detox? An average 12% reduction in size, correlating with self-reported anxiety dropping by 40%. The researchers noted this is the first documented case of reversible structural brain changes from behavioral tech modification.\n\nBut they went deeper. They found that notification sounds triggered fight-or-flight responses identical to predator sounds in evolutionary terms. Your brain literally can't distinguish between a text alert and a tiger roar at the neurochemical level. They measured cortisol spikes of 23% within two seconds of notification sounds.\n\nSo what does this mean for you? First, every interaction with your phone is a neurological event that reshapes your brain. This isn't metaphorical - it's measurable, physical change. Second, the damage is reversible, but it requires actual abstinence, not just reduction. Their data showed that even checking your phone once daily prevented most recovery. \n\nThird, and this is crucial - the study suggests we're in the middle of an uncontrolled experiment in human neural modification. No previous technology has shown this level of structural brain impact this quickly. If you're struggling with focus, anxiety, or decision-making, your phone might be literally eroding the brain regions responsible for these functions.\n\nThe takeaway? A true 30-day detox could be the most powerful cognitive enhancement tool available. The researchers are calling for device-free periods to become as common as sleep hygiene. Your brain's plasticity is both the problem and the solution.\n\nSo that's the neuroscience of why your phone feels addictive - because it's physically addicting your brain. Sarah, what've you got?\n\n# SOURCE(S) TO CREATE TRANSCRIPT FROM\n\n{{ JSON.stringify($json.data) }}\n\n# OTHER\n\nIMPORTANT: Only output the transcript and use \\n in between speakers dialog\nIMPORTANT: Your response must start with ...\n\"Please read aloud the following in a podcast interview style:\nHost 1: \"",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1056,
        928
      ],
      "id": "b33878b2-6d51-4251-a128-1f8ffad38c69",
      "name": "Set Prompt1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1536,
        528
      ],
      "id": "30e39dca-568d-44f5-bd8d-baab35449f8d",
      "name": "Basic LLM Chain1",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-goog-api-key",
              "value": "={{ $('Get Gemini API Key').item.json.decrypted_secret }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\":[{\n      \"text\": {{ JSON.stringify($json.choices[0].message.content) }}\n    }]\n  }],\n  \"generationConfig\": {\n    \"responseModalities\": [\"AUDIO\"],\n    \"speechConfig\": {\n      \"multiSpeakerVoiceConfig\": {\n        \"speakerVoiceConfigs\": [{\n            \"speaker\": \"Joe\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Algenib\"\n              }\n            }\n          }, {\n            \"speaker\": \"Jane\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Kore\"\n              }\n            }\n          }]\n      }\n    }\n  },\n  \"model\": \"gemini-2.5-flash-preview-tts\"\n}",
        "options": {
          "timeout": 1800000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2304,
        928
      ],
      "id": "d23bd32b-3cd6-4b50-9a63-bdb7a326cd6b",
      "name": "Generate Audio1",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 2
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "candidates[0].content.parts[0].inlineData.data",
        "options": {
          "fileName": "audio.pcm",
          "mimeType": "audio/L16"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2496,
        928
      ],
      "id": "7fefd841-1dfb-4168-aa08-04d8b0f2b575",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/tmp/{{ $('Generate Audio1').item.json.responseId }}-in.pcm",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2688,
        928
      ],
      "id": "ee2742d9-8029-4863-b2bd-145fb734f3b7",
      "name": "Read/Write Files from Disk2"
    },
    {
      "parameters": {
        "command": "=ffmpeg -f s16le -ar 24000 -ac 1 -i /tmp/{{ $('Generate Audio1').item.json.responseId }}-in.pcm -codec:a libmp3lame -qscale:a 2 /tmp/{{ $('Generate Audio1').item.json.responseId }}-out.mp3"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2880,
        928
      ],
      "id": "c11e7e04-27ab-44f5-b5c8-1aa81d6fb4dc",
      "name": "Execute Command1"
    },
    {
      "parameters": {
        "fileSelector": "=/tmp/{{ $('Generate Audio1').item.json.responseId }}-out.mp3",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        3104,
        928
      ],
      "id": "6b040b99-4580-4fcd-8c96-6234a7e7caea",
      "name": "Read/Write Files from Disk3"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://ehqdibhqhevjnknojogm.supabase.co/storage/v1/object/audio/microcast/{{ $('Webhook').item.json.body.microcast_id }}/{{ $binary.data.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "1de84e9b-8a17-4f61-8acc-e8f775b8f6da",
      "name": "Upload object1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        3312,
        928
      ],
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://ehqdibhqhevjnknojogm.supabase.co/storage/v1/object/sign/{{ $json.body.Key }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"expiresIn\": 2592000\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3520,
        928
      ],
      "id": "3757b22a-6a15-4696-85e4-04cab1649134",
      "name": "Generate Signed URL1",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const now = new Date();\n  const tomorrow = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000); // Add 1 day in ms\n  item.json.timestamp = tomorrow.toISOString(); // Compatible with Supabase timestampz\n}\n\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3744,
        928
      ],
      "id": "9ddae48f-4857-4782-96b5-1ee615c8524b",
      "name": "Generate Timestamp for Expires1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.body.source_ids }}",
                    "rightValue": "",
                    "operator": {
                      "type": "array",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "4211a371-7a5f-4e1f-9c0f-ed50453aa251"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "source_ids exist"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "eb41bc9d-0289-49a0-8a47-64c3ff7a96ba",
                    "leftValue": "={{ $('Webhook').item.json.body.notebook_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "notebook_id exists"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        128,
        1056
      ],
      "id": "f8266e86-ff56-47db-bab1-8006b9b5a103",
      "name": "Switch"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1536,
        688
      ],
      "id": "2b32dcd7-8b6f-454a-9a3d-a5110b22956b",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the array from the webhook input\nconst sourceIds = $('Webhook').item.json.body.source_ids;\n\n// Define placeholder UUID for padding\nconst placeholderUuid = '00000000-0000-0000-0000-000000000000';\n\n// Ensure we always have exactly 5 IDs\nconst paddedIds = [...sourceIds]; // Create a copy of the original array\n\n// Fill up to 5 IDs with placeholder if needed\nwhile (paddedIds.length < 5) {\n  paddedIds.push(placeholderUuid);\n}\n\n// Take only the first 5 IDs (in case input has more than 5)\nconst finalIds = paddedIds.slice(0, 5);\n\n// Return as JSON array\nreturn [{ json: { source_ids_array: finalIds } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        928
      ],
      "id": "d9305a9f-3413-47ed-9d84-b0a72375da5f",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "microcasts",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Webhook').item.json.body.microcast_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "audio_url",
              "fieldValue": "=https://ehqdibhqhevjnknojogm.supabase.co/storage/v1/{{ $json.signedURL }}"
            },
            {
              "fieldId": "audio_expires_at",
              "fieldValue": "={{ $json.timestamp }}"
            },
            {
              "fieldId": "generation_status",
              "fieldValue": "completed"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $('Generating timestamp title').item.json.timestamp_title }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3920,
        928
      ],
      "id": "3cc01404-5892-43ae-942e-286d3ed1a2d6",
      "name": "Update a row",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get current date and time\nconst now = new Date();\n\n// Format the timestamp\nconst timestamp = now.toLocaleString('en-US', {\n  month: 'short',    // Aug\n  day: 'numeric',    // 3\n  hour: 'numeric',   // 7\n  minute: '2-digit', // 29\n  hour12: true       // PM\n});\n\n// Return just the string\nreturn [{ json: { timestamp_title: timestamp } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        928
      ],
      "id": "3064b26b-ab7a-4756-bab0-baee75ccb7ed",
      "name": "Generating timestamp title"
    },
    {
      "parameters": {
        "chatId": "7919085089",
        "text": "=Supamind microcast created by: \n{{ $('Execute a SQL query1').item.json.full_name }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4592,
        1040
      ],
      "id": "bb8dd773-dd59-433c-bdc8-345b353ddc31",
      "name": "Send a text message",
      "webhookId": "1b714c8b-0f25-4bde-aa0c-7e8da0ec1b72",
      "credentials": {
        "telegramApi": {
          "id": "LEiEsL0XzYtYlFrf",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT full_name\nFROM profiles\nWHERE id = '{{ $('Webhook').item.json.body.user_id }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        4400,
        1040
      ],
      "id": "78473071-a52c-47ad-b5ef-fc9ba2cf20da",
      "name": "Execute a SQL query1",
      "credentials": {
        "postgres": {
          "id": "loHyKG67vLMDy8GM",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT openai_key_vault_secret FROM profiles WHERE id = '{{ $('Webhook').item.json.body.user_id }}'",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1376,
        928
      ],
      "id": "b43d4ebe-0813-4774-ae58-7f5feaac11e8",
      "name": "Get openai api key vault secret",
      "credentials": {
        "postgres": {
          "id": "loHyKG67vLMDy8GM",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get OpenAI API Key').item.json.decrypted_secret }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('json body').item.json.data }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2128,
        928
      ],
      "id": "6ff368fb-bb92-44a1-99fc-a18e97350de6",
      "name": "OpenAI API Request"
    },
    {
      "parameters": {
        "jsCode": "const prompt = $input.first().json['prompt'];\n\nreturn {\n  json: {\n    data: {\n      model: 'gpt-5',\n      messages: [\n        { role: 'user', content: prompt }\n      ],\n      max_completion_tokens: 1800,\n      reasoning_effort: 'medium',\n      verbosity: 'medium',\n      temperature: 1\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        928
      ],
      "id": "d73229b0-832a-4f6f-9de1-ca819c1858de",
      "name": "json body"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\":[{\n      \"text\": {{ JSON.stringify($json.text) }}\n    }]\n  }],\n  \"generationConfig\": {\n    \"responseModalities\": [\"AUDIO\"],\n    \"speechConfig\": {\n      \"multiSpeakerVoiceConfig\": {\n        \"speakerVoiceConfigs\": [{\n            \"speaker\": \"Joe\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Algenib\"\n              }\n            }\n          }, {\n            \"speaker\": \"Jane\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Kore\"\n              }\n            }\n          }]\n      }\n    }\n  },\n  \"model\": \"gemini-2.5-flash-preview-tts\"\n}",
        "options": {
          "timeout": 1800000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1920,
        528
      ],
      "id": "4be848c1-a8b3-432d-84ca-843f43d8035b",
      "name": "Generate Audio3",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 2,
      "credentials": {
        "googlePalmApi": {
          "id": "0Cl9BqX4cx9pQwrD",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT gemini_key_vault_secret FROM profiles WHERE id = '{{ $('Webhook').item.json.body.user_id }}'",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1760,
        928
      ],
      "id": "c37f16a9-8233-4009-b96e-8c9e3230b67d",
      "name": "Get Gemini api key vault secret",
      "credentials": {
        "postgres": {
          "id": "loHyKG67vLMDy8GM",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT decrypted_secret \nFROM vault.decrypted_secrets \nWHERE id = '{{ $json.gemini_key_vault_secret }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1936,
        928
      ],
      "id": "26c778aa-9e66-4b61-b50a-66f7745da134",
      "name": "Get Gemini API Key",
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "loHyKG67vLMDy8GM",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT decrypted_secret \nFROM vault.decrypted_secrets \nWHERE id = '{{ $json.openai_key_vault_secret }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1552,
        928
      ],
      "id": "617a0f5b-b2a2-424d-a028-d8bbdf6106d1",
      "name": "Get OpenAI API Key",
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "loHyKG67vLMDy8GM",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n-railway-production-519d.up.railway.app",
            "user-agent": "Deno/2.1.4 (variant; SupabaseEdgeRuntime/1.69.4)",
            "content-length": "298",
            "accept": "*/*",
            "accept-encoding": "gzip,br",
            "accept-language": "*",
            "authorization": "xXoFdKtnFp2f4VpcHPGN3e3XFNBi6u",
            "content-type": "application/json",
            "x-forwarded-for": "3.71.255.136",
            "x-forwarded-host": "n8n-railway-production-519d.up.railway.app",
            "x-forwarded-proto": "https",
            "x-railway-edge": "railway/europe-west4-drams3a",
            "x-railway-request-id": "GS7zbhl_S6GiIwUVYqdHTg",
            "x-real-ip": "3.71.255.136",
            "x-request-start": "1761345830329"
          },
          "params": {},
          "query": {},
          "body": {
            "microcast_id": "bef17699-2397-422f-ad72-e732e3d8bb10",
            "source_ids": [
              "653fbc6c-f06e-46c3-8907-8435dc58626f",
              "340513a3-cd1a-41ce-ae3e-3c72c1afd802"
            ],
            "user_id": "ae11b2ca-64c9-4e82-a820-ab3b6a25f9e4",
            "callback_url": "https://ehqdibhqhevjnknojogm.supabase.co/functions/v1/microcast-generation-callback"
          },
          "webhookUrl": "https://n8n-railway-production-519d.up.railway.app/webhook/4c4699bc-004b-4ca3-8923-373ddd4a274e",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Check is FFMPEG Installed": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond with 500 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Check is FFMPEG Installed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sources": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Set Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Prompt": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "Upload object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload object": {
      "main": [
        [
          {
            "node": "Generate Signed URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Signed URL": {
      "main": [
        [
          {
            "node": "Generate Timestamp for Expires",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Timestamp for Expires": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sources1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Set Prompt1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Prompt1": {
      "main": [
        [
          {
            "node": "json body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        []
      ]
    },
    "Generate Audio1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk2": {
      "main": [
        [
          {
            "node": "Execute Command1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk3": {
      "main": [
        [
          {
            "node": "Upload object1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload object1": {
      "main": [
        [
          {
            "node": "Generate Signed URL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Signed URL1": {
      "main": [
        [
          {
            "node": "Generate Timestamp for Expires1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Timestamp for Expires1": {
      "main": [
        [
          {
            "node": "Update a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Generating timestamp title",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Get Sources1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generating timestamp title": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query1": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update a row": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get openai api key vault secret": {
      "main": [
        [
          {
            "node": "Get OpenAI API Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI API Request": {
      "main": [
        [
          {
            "node": "Generate Audio1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "json body": {
      "main": [
        [
          {
            "node": "Get openai api key vault secret",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Gemini api key vault secret": {
      "main": [
        [
          {
            "node": "Get Gemini API Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Gemini API Key": {
      "main": [
        [
          {
            "node": "OpenAI API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get OpenAI API Key": {
      "main": [
        [
          {
            "node": "Get Gemini api key vault secret",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a1ef8232-26a8-4be5-bc6f-7c97a17b6edb",
  "meta": {
    "instanceId": "f5707d3666ba184efe554775a181f51837c332c4fa57af1133598e1ba699e314"
  },
  "id": "jUOJ4Hk7VTEpfGB0",
  "tags": []
}