{
  "name": "InsightsLM - Upsert to Vector Store",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "19566c6c-e0a5-4a8f-ba1a-5203c2b663b7",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2592,
        96
      ],
      "id": "f2c1ed3f-07c6-4960-bb7b-0a7c403dfa32",
      "name": "Webhook",
      "webhookId": "19566c6c-e0a5-4a8f-ba1a-5203c2b663b7",
      "credentials": {
        "httpHeaderAuth": {
          "id": "gvJYxh53ckvIJCGJ",
          "name": "Webhook Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        -448,
        96
      ],
      "id": "fec1dc95-2d77-4ade-926c-d0cdab058b19",
      "name": "Supabase Vector Store",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "notebook_id",
                "value": "={{ $('Code').item.json.notebook_id }}"
              },
              {
                "name": "source_id",
                "value": "={{ $('Code').item.json.source_id }}"
              },
              {
                "name": "user_id",
                "value": "={{ $('Code').item.json.user_id }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        -352,
        336
      ],
      "id": "7707c143-3d6b-4789-afd7-c0d2a1ba2149",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkOverlap": 200,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        -256,
        528
      ],
      "id": "624dd068-388b-47a8-a10e-94da49b58893",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dab34521-ffef-41db-9eb3-8985fd108466",
              "name": "text",
              "value": "={{ $('Code').item.json.extracted_text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -688,
        96
      ],
      "id": "e91791e1-4fe3-405a-8a2c-5cf8c757583c",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// Handle both notebook sources and feed sources\nlet notebook_id = null;\nlet source_id;\nlet user_id;\nlet context;\n\ntry {\n  const webhookData = $('Webhook').first();\n  if (webhookData && webhookData.json?.body) {\n    const body = webhookData.json.body;\n    source_id = body.source_id;\n    user_id = body.user_id;\n    context = body.context;\n    \n    // Check if this is explicitly a feed source\n    if (context === 'feed') {\n      // Explicit feed source - notebook_id stays null\n      notebook_id = null;\n    } else if (!context && !body.notebook_id) {\n      // Implicit feed source: no context and no notebook_id provided\n      notebook_id = null;\n    } else if (body.file_path) {\n      // Extract notebook_id from file path for notebook sources\n      const path = body.file_path;\n      notebook_id = path.split('/')[0];\n    }\n  }\n} catch (e) {\n  // Fallback: get from input (for backwards compatibility)\n  const input = $input.first().json;\n  notebook_id = input.notebook_id || null;\n  source_id = input.source_id;\n  user_id = input.user_id;\n}\n\nconst extracted_text = $input.first().json.extracted_text;\n\n// Explicitly construct the return object to ensure notebook_id is always included\nconst returnData = {\n  notebook_id: notebook_id,\n  extracted_text: extracted_text,\n  source_id: source_id,\n  user_id: user_id\n};\n\nreturn [\n  {\n    json: returnData\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2160,
        96
      ],
      "id": "23e1764e-3221-4d96-8b1f-45910dc197ce",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://ehqdibhqhevjnknojogm.supabase.co/functions/v1/process-document-callback",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"source_id\": \"{{ $('Code').item.json.source_id }}\",\n  \"status\": \"completed\"\n}\n",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        96
      ],
      "id": "f9869778-6c45-40c4-8856-cb849fb1cead",
      "name": "HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"title\": \"<ADD>\",\n\t\"summary\": \"<ADD>\",\n    \"category\": [\"Category1\", \"Category2\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -1600,
        336
      ],
      "id": "f0b5d7dd-edb9-4dd6-ba2c-e97cb463cab1",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "o4tZaImqg3WNpQmD",
          "mode": "list",
          "cachedResultName": "InsightsLM - Extract Text"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "filePath": "={{ $json.body.file_path }}"
          },
          "matchingColumns": [
            "filePath"
          ],
          "schema": [
            {
              "id": "filePath",
              "displayName": "filePath",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -2384,
        96
      ],
      "id": "f2faba20-bd91-4acb-8070-f03de1a0b91b",
      "name": "Extract Text"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "notebook_id"
            },
            {
              "name": "extracted_text"
            },
            {
              "name": "source_id"
            },
            {
              "name": "user_id"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2592,
        -160
      ],
      "id": "f88bd6e5-b4ea-4e6d-98a5-e75abb5a2225",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -80,
        96
      ],
      "id": "c278269d-ed4f-4826-9263-f60820fa7278",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "content": "## To Do \n- Configure the Supabase nodes to reference your Project\n- Configure \"Extract Text\" to hit the correct workflow\n- Update the Host of the \"HTTP Request\" to hit your project",
        "width": 580,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1136,
        -192
      ],
      "id": "e09064cf-4c04-45da-b73a-e5a7eed25d87",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
        "height": 220,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1856,
        -240
      ],
      "id": "e8a99a95-c9d3-4e17-9f7d-4b95e13d9103",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1712,
        336
      ],
      "id": "307e335f-6517-4902-93d9-02481bfb3b3e",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -480,
        336
      ],
      "id": "8395d4a0-2eeb-4252-9f8b-4b828932f07b",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  p.summary_prompt,\n  p.deep_dive_prompt,\n  p.categorization_prompt,\n  ARRAY_AGG(uc.name) as category_names\nFROM profiles p\nLEFT JOIN user_categories uc ON p.id = uc.user_id\nWHERE p.id = '{{ $('Code').item.json.user_id }}'\nGROUP BY p.id, p.summary_prompt, p.deep_dive_prompt, p.categorization_prompt;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1920,
        96
      ],
      "id": "3c77acb4-b6dd-49f2-b009-655b579513eb",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "loHyKG67vLMDy8GM",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Content: {{ $('Code').item.json.extracted_text }}\n\nUser Prefrences: {{ $('Execute a SQL query').item.json.deep_dive_prompt }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "You are an expert analyst creating strategic deep dive analyses. Extract meaningful implications and actionable takeaways that answer \"so what?\" - not summaries.\n\n## Inputs\n1. **Main Content**: Article or transcript text\n2. **User Preferences** (optional): Customization requirements\n\n## Analysis Requirements\n\n**Include:**\n- Strategic implications and opportunities\n- Tactical takeaways and hidden insights\n- Second-order effects and trend connections\n- Risks, challenges, and recommendations\n- Clear \"so what?\" answers with actionable value\n\n**Exclude:**\n- Summaries or obvious restatements\n- Generic observations without strategic value\n- Filler content\n\n## User Customization\nWhen preferences provided:\n- **Expert Perspectives** (CMO, CDO, CPO, Executive Coach): Only include if genuinely relevant. Frame authentically from that role's viewpoint.\n- Adapt style/focus based on other preferences while maintaining strategic depth.\n\n## Output Requirements\n\n**Format:** JSON only\n{\n    \"deep_dive\": \"<your markdown-formatted analysis>\"\n}\n\nLength: 500-1000 words (prefer brevity)\n\n500-600 words: Default for straightforward content\n600-800 words: Multi-faceted topics with 3-5 insights\n800-1000 words: Only for complex content with cascading implications\n\nMarkdown Structure:\n## for main headers\n### for subheaders\n**bold** for emphasis\nLine breaks: \\n\\n between paragraphs and around headers\nShort paragraphs (3-4 sentences)\n\nExample in JSON:\n{\n    \"deep_dive\": \"## Strategic Implications\\n\\nKey insight...\\n\\n### Tactical Opportunities\\n\\n- **Quick Win**: Action item\\n- **Long-term**: Strategic move\\n\\n## Critical Takeaway\\n\\nSo what?...\"\n}\n\n## Quality Standards\n\nEvery point must pass \"so what?\" test\nLead with most important insight\nConnect tactics to strategy\nEnd with concrete next steps\nPowerful 500 words > padded 1000 words\n\nOutput valid JSON only. Add significant value beyond the content itself."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -1392,
        96
      ],
      "id": "c197cc39-4a62-468e-ba01-bdb91d868808",
      "name": "Generate Content Deep Dive"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"deep_dive\": \"<ADD>\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1232,
        336
      ],
      "id": "70664ce1-e2fa-468c-8f42-3833c54e9ec2",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Content: {{ $('Code').item.json.extracted_text }}\nCategories: {{ $json.category_names }}\nCategorization user preferences: {{ $json.categorization_prompt }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a content summarizer and categorizer. Create a clear title, comprehensive summary, and accurate categorization of the provided content.\n\n## Inputs\n1. **Content**: The text to summarize\n2. **Categories**: Array of available categories\n3. **User Preferences** (optional): Categorization guidance\n\n## Summary Requirements\n- **Length**: 400-600 words (2-3 minute read)\n- **Style**: Clear, objective, and informative\n- **Structure**: Logical flow from main idea to supporting points\n- **Coverage**: Include all key points, data, and conclusions\n\n## Title Requirements\n- Descriptive and specific (not clickbait)\n- 5-12 words ideal length\n- Captures the core topic/finding\n\n## Categorization Requirements\n- **Select ONLY from provided categories array**\n- **Maximum 2 categories** (prefer 1 if highly relevant)\n- **Quality over quantity**: Only select categories with strong content fit\n- **User preferences**: If categorization guidance provided, follow it while maintaining accuracy\n\n## What to Include in Summary\n- Main thesis or central argument\n- Key supporting points and evidence\n- Important data, statistics, or findings\n- Notable conclusions or recommendations\n- Context necessary for understanding\n\n## What to Avoid\n- Personal opinions or interpretations\n- Excessive detail or minor points\n- Categories not in the provided list\n- Forcing categories that don't fit well\n\n## Output Format\nReturn ONLY valid JSON:\n{\n    \"title\": \"Your title here\",\n    \"summary\": \"Your summary here\",\n    \"category\": [\"Category1\", \"Category2\"]\n}\nFocus on WHAT the content says. Select categories that best represent the content's primary themes."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -1744,
        96
      ],
      "id": "95c15939-fb29-44e6-9aa0-dd92dc3e9f95",
      "name": "Generate Title, Category & Summary"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1376,
        336
      ],
      "id": "7272b9f4-3fc1-4dd0-ade4-d4300097a179",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "sources",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Code').item.json.source_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "content",
              "fieldValue": "={{ $('Code').item.json.extracted_text }}"
            },
            {
              "fieldId": "summary",
              "fieldValue": "={{ $('Generate Title, Category & Summary').item.json.output.summary }}"
            },
            {
              "fieldId": "display_name",
              "fieldValue": "={{ $('Generate Title, Category & Summary').item.json.output.title }}"
            },
            {
              "fieldId": "deep_summary",
              "fieldValue": "={{ $json.output.deep_dive }}"
            },
            {
              "fieldId": "category",
              "fieldValue": "={{ $('Generate Title, Category & Summary').item.json.output.category }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -912,
        96
      ],
      "id": "76675d7e-bc47-4c9d-ad44-d9944113f3de",
      "name": "Update a row",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "extracted_text": "A structured testing system helped one app lower cost-per-trial while targeting its most profitable users\n\n> **Summary**: Meta UA campaign performance can be improved by using a high-velocity creative testing framework that separates proven ads (BAU) from experimental creatives. This structure enables rapid iteration, controlled delivery, and reduced cost per trial (CPT) without sacrificing trial-to-subscription conversion. Key tactics include ICE scoring, 10,000-impression thresholds, and placement monitoring to maintain targeting accuracy and algorithm efficiency.\n\nAt this point, we all know that targeting in your UA campaigns is done through creatives, not through audience settings (I think I’ve even repeated this sentence in some of my articles already).\n\nAnd although you can still achieve success with narrower audiences, you’ll eventually hit a ceiling when you try to scale. In this case, if going to broad audiences allows you to grow, having a good set of creatives and enough creative testing volume becomes the key that unlocks profitable scale.\n\nIn this article, I’ll show how a high-velocity creative testing framework helped me scale a subscription app with Meta campaigns – while driving the cost per trial (the event we optimized for) to a level they hadn’t reached even with lower spend.\n\n![Image 1: Line chart showing how cost per trial decreased while ad spend increased from Jan–May 2025.\n](https://revenuecat.wpenginepowered.com/wp-content/uploads/2025/07/meta-cpt-vs-spend-line-chart-1024x491.png)\n\n**Cost per trial dropped as spend increased**\n\nWhat was the situation before I took over?\n------------------------------------------\n\nBefore explaining how to create this framework to accelerate your creative testing and generate positive growth for your app, let me tell you that having a good product that converts well is key. In this case, this subscription app was offering a 14-day free trial that worked well during the previous year but was struggling to grow in the first half of this year.\n\nWith such a long free trial, we couldn’t optimize for subscriptions directly—the attribution window on most ad networks maxes out at 7 days post-click. So we used free trials as our proxy event. Our goal: scale spend while lowering cost per trial (CPT), without hurting the conversion rate from trial to subscription.\n\nRight now in most ad networks, decreasing the CPA of a proxy event like trial isn’t hard. You simply need to build the creative framework that we’re going to explain in this article (or something similar) and also have a daily budget that feeds the algorithm with constant, quality signals (what Thomas Petit recently described as [signal engineering](https://www.youtube.com/live/nm2RngDr2AY)).\n\nHowever, there’s an important catch in this process.\n\nLowering the cost per trial often comes from targeting younger audiences that have lower purchase intent, which usually hurts the final subscription conversion rate – and remember, we couldn’t affect this CVR if we wanted to achieve profitable growth, so we had to keep targeting our core audience (primarily men over 45).\n\nI’ve seen this pattern of Meta optimizing towards upper-funnel events repeatedly, and if you don’t keep an eye on the age and placement distribution of your campaigns, you will end up worsening your overall ROAS, although your cost per trial goes down.\n\nThis means that, apart from creating the framework for the creatives, we also had to monitor the delivery of our campaigns constantly to be sure that our target audience was still the main objective for our new campaigns and creatives.\n\nWith all that being said, it was time to check the campaigns, and what I found is also one of the problems that many UA managers face in Meta ads: only one creative from the few they had was gathering most of the impressions and spend.\n\n![Image 2: Spend breakdown across three ads in Meta, showing one creative receiving the vast majority of budget.](https://revenuecat.wpenginepowered.com/wp-content/uploads/2025/07/meta-ad-spend-distribution-table-1024x468.png)\n\n**Meta optimized all spend to a single ad**\n\nDoes it sound familiar to you?\n\nWell, this is just Meta optimizing towards one creative simply because the algorithm finds better upper-funnel metrics on it (CTR, hook rate, hold rate) than other ads.\n\nWe had a bunch of new ads ready to test and scale, so we had to create a new strategy that could prevent us from such a situation while we also scaled the app under the conditions I explained above. So we simply changed the campaign setup.\n\n![Image 3: Diagram of a previous Meta campaign setup with a single broad ad group serving multiple creatives.](https://revenuecat.wpenginepowered.com/wp-content/uploads/2025/07/meta-old-campaign-setup-diagram-1024x463.png)\n\n**The old setup relied on Meta to pick winners**\n\nHere’s what the original setup looked like. They were relying on Meta’s algorithm to choose the top-performing creative. This can work for smaller apps with tight budgets if you rotate ads regularly and keep a close eye on CPA and targeting.\n\nHow to create a high-velocity creative testing framework to scale your app\n--------------------------------------------------------------------------\n\nWhen you have the resources to create new assets continuously and your goal is to scale through profitable growth, you need a setup that allows you to move fast with both variables: creatives and budgets. With this in mind, I built a new structure to support them both:\n\n![Image 4: Visual framework showing a high-velocity creative testing setup with BAU and multiple testing ad groups.\n](https://revenuecat.wpenginepowered.com/wp-content/uploads/2025/07/meta-new-testing-framework-diagram-1024x386.png)\n\n**How the new testing setup works**\n\nWith this setup, instead of relying on the algorithm to pick the creative, we had control over everything: data, creatives, budgets, and testing velocity. The functioning of this setup was quite straightforward:\n\n*   We created one “winning” ad group with all the winning assets that they had detected before I joined. This ad group had the majority of the budget, as we already knew that the creatives were producing a good cost per trial and they also targeted our audience segment efficiently (so our conversion rate from free trial to subscription was not affected negatively).\n*   We created 3 testing ad groups which always had different creatives. The goal of this ad group was always to nurture the BAU ad group with new winning ads and also to serve as the engine of the high-velocity creative testing framework. The more budget we could put on these ad groups, the faster we could test new variants.\n\nThe day-to-day management of such a setup was simple:\n\n*   We checked the BAU ad group and monitored the cost per trial. If CPT was 20% above baseline during the last 2 days, we paused that winner and put a new winner from the testing ad groups.\n*   We checked every testing ad group, and if CPT was on the baseline or slightly better and it was targeting our target audience after achieving at least 10,000 impressions, we moved it to the BAU ad group if there was any slot available. If not, the creative was in reserve until a new slot was available. (In these cases, you can add more BAU ad groups with more winning assets if you have more budget, but that was not our case, so we had to go a bit slower – that’s why I always say that velocity depends on the size of your pocket mostly.)\n*   If any of the creatives within the testing ad groups were not receiving spend after being active for 2 days or had a bad cost per trial during the same period, we simply paused that creative and uploaded a new one.\n\nWith this setup, we were able to test 30+ creatives and to detect at least 2–3 winners per week. This allowed us to scale the BAU ad group and generate the trend that you can see in the beginning of the article: scaling the spend while we decreased the cost per trial.\n\nAnd the most important part is we drastically changed the placement distribution with this setup:\n\n![Image 5: Line chart showing increased impressions in Facebook Feed and Reels after campaign structure changes.](https://revenuecat.wpenginepowered.com/wp-content/uploads/2025/07/meta-placement-shift-line-chart-1024x494.png)\n\n**Testing velocity drove more efficient placements**\n\n**The biggest win: placement distribution**\n-------------------------------------------\n\nThis was, without any doubt, the biggest win of the whole strategy: all our money started to be spent in the placements where our core audience spent time in social media – Facebook – and that allowed us to:\n\n*   Decrease the cost per trial by 29%\n*   Increase trial-to-subscription conversion by 2%\n\nObviously, apart from iterating the campaigns as explained above, we were continuously monitoring how the conversion rate from free trial to subscription was performing for every single daily cohort. This was completely necessary to be sure that the campaign data was actually confirming our hypothesis about the correlation between the placement and the purchase intention of our users.\n\n**Managing creatives: how the system runs**\n-------------------------------------------\n\nOnce we had the setup in place, we needed a way to analyze, iterate, and manage creatives on a daily basis.\n\nThe rules for moving creatives between groups were simple:\n\n*   Cost per Trial needs to be equal or better than the baseline after achieving 10,000 impressions (just to be sure that performance is sustained by solid data)\n*   The placement distribution of that creative must be clearly focused on your target audience (in my case, Facebook)\n\nWith these two conditions, we created a spreadsheet where we tracked the status of the creatives and their performance. Every time that we found a winner, we created a new tab within the spreadsheet to work on some iterations that could work as new winners:\n\n![Image 6: Spreadsheet showing creative variants, ICE scores, and performance metrics to support creative testing decisions.\n](https://revenuecat.wpenginepowered.com/wp-content/uploads/2025/07/creative-tracking-ice-score-sheet-1024x152.png)\n\n**Creative tracker used to prioritize and score iterations**\n\nAs you can see, each winner could have multiple iterations. We normally produced some iterations completely from scratch, some were generated by ChatGPT, and others were inspired by looking at the competitors. It doesn’t matter how: the important thing here is to produce enough iterations of the winner to be completely sure that you milk that concept to the maximum.\n\nOnce we had some ideas to iterate, we just filled out the template – as you can see in the screenshot. In this case, apart from the generic information about the name of the ad, language, format, etc, we had to fill out an ICE SCORE for each iteration according to our experience with other ads.\n\nPutting an ICE SCORE was crucial to prioritize the order of the creatives and it actually worked as a filter when one spot was available in the BAU ad group. Thanks to this system, scalability was achieved even faster because the iterations with more potential were run before other iterations, feeding the whole system with more potential winners at a higher pace.\n\nOnce we tested the iterations, we also put the main engagement metrics next to the iteration and compared them with the metrics of the original winning asset. With this quick analysis, we were able to see if the ideas we were developing were actually having the effect we were hoping for.\n\nFor example, if we had an iteration where the main change was the hook, we expected that the hook rate in that iteration would be higher than in the original winning asset. Or if we changed the content of the video to retain more users, we expected to have a higher hold rate than in the winning concept.\n\nConclusion\n----------\n\nWith this well-structured framework, you can really nurture your campaigns with the best assets possible, giving the algorithm the right conditions to hit your CPA goals.\n\nOf course, this process takes time and constant analysis across your campaigns, creatives, and product. But if you have the resources to implement it, your chances of achieving profitable growth go way up – just like they did for this company.\n\nAs I mentioned above, the more budget you have, the faster you can move with the testing. In our case, we were limited to one BAU ad group, but if you have higher budgets, you can run multiple BAU and testing groups in parallel, giving you more slots to scale and test every day.\n\nI hope this case study gives you a few ideas to test and maybe a faster way to scale profitably!",
          "source_id": "9569d3b9-e39c-42b7-95f2-cd84accc0087",
          "user_id": "ae11b2ca-64c9-4e82-a820-ab3b6a25f9e4"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Title, Category & Summary",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Title, Category & Summary",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Generate Title, Category & Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content Deep Dive": {
      "main": [
        [
          {
            "node": "Update a row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Content Deep Dive",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Generate Title, Category & Summary": {
      "main": [
        [
          {
            "node": "Generate Content Deep Dive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Content Deep Dive",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Update a row": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "54bd72d6-7117-4da6-b980-112de97f0f9a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f5707d3666ba184efe554775a181f51837c332c4fa57af1133598e1ba699e314"
  },
  "id": "L4jfcqHK5HarmFr8",
  "tags": []
}