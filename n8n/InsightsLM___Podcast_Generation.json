{
  "name": "InsightsLM - Podcast Generation",
  "nodes": [
    {
      "parameters": {
        "command": "if ffmpeg -version > /dev/null 2>&1; then\n  echo \"FFmpeg is installed\"\nelse\n  echo \"FFmpeg is NOT installed\"\nfi\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -416,
        1328
      ],
      "id": "b804e4c1-5f49-4fb6-943b-92f183c302a9",
      "name": "Check is FFMPEG Installed"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "05ef5c0e-fe71-4367-a88d-6ba65b8e4e48",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "=FFmpeg is installed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "3e8219ed-4cfb-4706-b6c0-6cdf4e1d1c3b",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -208,
        1328
      ],
      "id": "3adf9104-7091-4b88-b45b-efdb219c7742",
      "name": "If"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n    \"message\": \"Workflow was started\"\n}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        112,
        1200
      ],
      "id": "54c2c7a8-af45-488e-9439-997d43ca2676",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"error\": \"FFmpeg not installed\",\n  \"code\": \"FFMPEG_NOT_INSTALLED\",\n  \"details\": \"The server requires ffmpeg to be installed\"\n}",
        "options": {
          "responseCode": 500
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        112,
        1392
      ],
      "id": "2b492335-fad2-4981-8c5c-bd790256bddd",
      "name": "Respond with 500 Error"
    },
    {
      "parameters": {
        "content": "## To Do \n- REQUIREMENT: FFMPEG needs to be installed on your server for this workflow to succeed\n- Configure the Supabase nodes to reference your Project\n- Configure your Google Cloud API credentials\n- Update the Host of the \"HTTP Requests\" to hit your project",
        "width": 680,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2048,
        848
      ],
      "id": "73fb9911-4a7c-413b-8bb9-9ec86a3f501e",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "4c4699bc-004b-4ca3-8923-373ddd4a274e",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -688,
        1328
      ],
      "id": "36040655-7e2a-4af2-8524-f0e84fa2c874",
      "name": "Webhook",
      "webhookId": "4c4699bc-004b-4ca3-8923-373ddd4a274e",
      "credentials": {
        "httpHeaderAuth": {
          "id": "gvJYxh53ckvIJCGJ",
          "name": "Webhook Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "sources",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "notebook_id",
              "condition": "eq",
              "keyValue": "={{ $('Webhook').item.json.body.notebook_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        368,
        1200
      ],
      "id": "2bf3e04b-7472-4a31-80e3-c78fb8f742be",
      "name": "Get Sources",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "title,content",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        592,
        1200
      ],
      "id": "30a71143-107d-4c02-a43f-54d972c42437",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c3743cbc-c838-401a-8f65-95a386707ded",
              "name": "prompt",
              "value": "=You'll create a conversational podcast script featuring two hosts discussing the provided source material. The script should sound like an authentic, engaging conversation while ensuring every sentence provides value to the listener.\nHOST PERSONAS\nHost 1 (The Explainer): Knowledgeable but approachable. Uses analogies and breaks down complex concepts. Occasionally gets excited about interesting details.\nHost 2 (The Questioner): Curious and engaged. Asks clarifying questions, expresses genuine reactions, and connects ideas to broader implications.\nCORE DIALOGUE PRINCIPLES\n1. Natural Conversation Flow\n\nStart mid-thought occasionally: \"...and that's exactly why this matters so much\"\nUse incomplete sentences when interrupted: \"But wait, if that's true, then—\" \"Exactly!\"\nInclude thinking pauses: \"So... let me make sure I understand this\"\nNatural segues: \"Speaking of which...\" or \"That actually reminds me...\"\n\n2. Authentic Speech Patterns\n\nContractions always: \"it's\" not \"it is\", \"we've\" not \"we have\"\nFiller phrases sparingly: \"I mean\", \"You know\", \"Actually\"\nSelf-corrections: \"The data shows—well, actually, what it really reveals is...\"\nReal-time reactions: \"Oh wow\", \"Hold on\", \"Wait, what?\"\n\n3. Value-Dense Content\n\nEvery exchange must either:\n\nIntroduce new information\nClarify a complex concept\nConnect ideas in meaningful ways\nProvide concrete examples\nBuild toward key insights\n\n\nNO empty affirmations or repetitive agreements\nReplace \"That's so interesting!\" with \"That's interesting because it changes how we think about...\"\n\nSTRUCTURAL FRAMEWORK\nOpening (30-45 seconds)\nHost 1: [Jump directly into an intriguing observation or question from the source material]\nHost 2: [React with genuine curiosity and expand the thought]\nHost 1: Right, so today we're diving deep into [topic]. We've got [source] that reveals...\nHost 2: [Add context about why this matters now]\nBody Sections\nFor each major point:\n\nHook: Start with the most surprising/important aspect\nExplain: Break it down using analogies or examples\nQuestion: Have Host 2 probe deeper or challenge assumptions\nConnect: Link to broader implications or other concepts\nTransition: Natural bridge to next point\n\nDynamic Elements\n\nInterruptions: Use 2-3 per section when genuine excitement or realization occurs\nBuilding on ideas: \"And what's even more fascinating...\" / \"But here's where it gets really interesting...\"\nDisagreement/Tension: Occasionally include friendly pushback: \"Okay, but doesn't that assume...?\"\n\nSPECIFIC TECHNIQUES\nMaking Complex Ideas Accessible\n\nAnalogies: \"It's like [everyday example]\"\nConcrete numbers: \"To put that in perspective...\"\nReal-world applications: \"So if you're someone who...\"\n\nMaintaining Energy\n\nVary sentence length dramatically\nUse emphasis naturally: \"This completely changes...\"\nExpress genuine surprise: \"I had no idea that...\"\nCreate mini-cliffhangers: \"But then something unexpected happened...\"\n\nAuthentic Reactions\n\n\"Wait, back up a second...\"\n\"Okay, so if I'm following...\"\n\"See, this is what blows my mind...\"\n\"Can we just pause on that for a moment?\"\n\nPACING GUIDELINES\n\nTarget Length: 5-12 minutes of spoken content\n\nSimple/short sources: 5-7 minutes\nMedium complexity: 7-10 minutes\nComplex/lengthy sources: 10-12 minutes\n\n\nQuick exchanges: 2-3 short sentences back and forth for energy\nDeep dives: One host explains for 3-4 sentences while other uses minimal encouragers (\"Right\", \"Mm-hmm\")\nRevelation moments: Slow down, let impact sink in\nTransitions: Quick, natural, forward-moving\n\nLength Calibration\n\n~150-160 words per minute of natural speech\n5 minutes ≈ 750-800 words\n10 minutes ≈ 1,500-1,600 words\n12 minutes ≈ 1,800-1,920 words\nAdjust depth of exploration based on source complexity while maintaining engagement\n\nCOMMON PITFALLS TO AVOID\n❌ Empty praise: \"That's so fascinating!\" (without explaining why)\n❌ Repetitive agreement: Multiple \"Exactly!\" in a row\n❌ Over-explaining: Treating listener like they know nothing\n❌ Perfect grammar: Real people don't speak in complete, perfect sentences\n❌ Linear thinking: Real conversations loop back and build\nENDING (30-45 seconds)\nHost 1: So if we zoom out here... [synthesize main insight]\nHost 2: [Connect to listener's life/broader implications]\nHost 1: [Thought-provoking question or action item]\nHost 2: And on that note... [natural sign-off]\nBoth: Until next time, keep [relevant action verb].\nFINAL CHECKLIST\nBefore finalizing, ensure:\n\n Every exchange advances understanding\n Natural interruptions and incomplete thoughts included\n Complex ideas have concrete examples\n Energy varies throughout (not monotone enthusiasm)\n Genuine moments of discovery/surprise\n Clear value for listener in each section\n\n# SOURCE(S) TO CREATE TRANSCRIPT FROM\n\n{{ JSON.stringify($json.data) }}\n\n# OTHER\n\nIMPORTANT: Only output the transcript and use \\n in between speakers dialog\nIMPORTANT: Your response must start with ...\n\"Please read aloud the following in a podcast interview style:\nHost 1: \"",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        848,
        1200
      ],
      "id": "a12a3968-6929-489f-a497-a837f3c7e13c",
      "name": "Set Prompt"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1104,
        1184
      ],
      "id": "25ae0627-f92b-4fa3-8722-6ce6cb678697",
      "name": "Basic LLM Chain",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1104,
        1408
      ],
      "id": "a805fc31-c265-49cc-8a95-e79ec7311783",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "vyxVe2RGE1yLgSDx",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\":[{\n      \"text\": {{ JSON.stringify($json.text) }}\n    }]\n  }],\n  \"generationConfig\": {\n    \"responseModalities\": [\"AUDIO\"],\n    \"speechConfig\": {\n      \"multiSpeakerVoiceConfig\": {\n        \"speakerVoiceConfigs\": [{\n            \"speaker\": \"Joe\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Algenib\"\n              }\n            }\n          }, {\n            \"speaker\": \"Jane\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Kore\"\n              }\n            }\n          }]\n      }\n    }\n  },\n  \"model\": \"gemini-2.5-flash-preview-tts\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1520,
        1184
      ],
      "id": "acf52aa8-77ad-41ba-8b27-66f496be6454",
      "name": "Generate Audio",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "credentials": {
        "googlePalmApi": {
          "id": "0Cl9BqX4cx9pQwrD",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "candidates[0].content.parts[0].inlineData.data",
        "options": {
          "fileName": "audio.pcm",
          "mimeType": "audio/L16"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1744,
        1184
      ],
      "id": "0c297369-7ff9-45f8-be19-83191b69a676",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/tmp/{{ $('Generate Audio').item.json.responseId }}-in.pcm",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1968,
        1184
      ],
      "id": "d6a89506-9cd2-4486-85a1-be20060d5d04",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "command": "=ffmpeg -f s16le -ar 24000 -ac 1 -i /tmp/{{ $('Generate Audio').item.json.responseId }}-in.pcm -codec:a libmp3lame -qscale:a 2 /tmp/{{ $('Generate Audio').item.json.responseId }}-out.mp3"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2208,
        1184
      ],
      "id": "d3f96ec9-2373-4ca7-8282-c078de61b92b",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "fileSelector": "=/tmp/{{ $('Generate Audio').item.json.responseId }}-out.mp3",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2432,
        1184
      ],
      "id": "5d91d055-300e-4a33-b3e9-fac3b25dd3e0",
      "name": "Read/Write Files from Disk1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://ehqdibhqhevjnknojogm.supabase.co/storage/v1/object/audio/{{ $('Webhook').item.json.body.notebook_id}}/{{ $binary.data.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "65a6bb6c-99e1-4e17-ac97-95bf0e23a954",
      "name": "Upload object",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2640,
        1184
      ],
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://ehqdibhqhevjnknojogm.supabase.co/storage/v1/object/sign/{{ $json.body.Key }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"expiresIn\": 86400\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2848,
        1184
      ],
      "id": "f05a5230-c0c5-4b55-b50c-57b1a3c4df83",
      "name": "Generate Signed URL",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const now = new Date();\n  const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000); // Add 1 day in ms\n  item.json.timestamp = tomorrow.toISOString(); // Compatible with Supabase timestampz\n}\n\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3088,
        1184
      ],
      "id": "8d5764b9-498a-4a73-a62a-69ccb6fa5716",
      "name": "Generate Timestamp for Expires"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "notebooks",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Webhook').item.json.body.notebook_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "audio_overview_url",
              "fieldValue": "=https://ehqdibhqhevjnknojogm.supabase.co/storage/v1/{{ $json.signedURL }}"
            },
            {
              "fieldId": "audio_url_expires_at",
              "fieldValue": "={{ $json.timestamp }}"
            },
            {
              "fieldId": "audio_overview_generation_status",
              "fieldValue": "completed"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3344,
        1184
      ],
      "id": "e549327c-f98e-4119-82b0-92c8e902fd06",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "7GmwvHGWyd47X1M6",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
        "height": 220,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -688,
        912
      ],
      "id": "f1d8ead0-76e7-4a47-8399-969861b08a46",
      "name": "Sticky Note8"
    }
  ],
  "pinData": {},
  "connections": {
    "Check is FFMPEG Installed": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond with 500 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "Get Sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Check is FFMPEG Installed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sources": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Set Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Prompt": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "Upload object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload object": {
      "main": [
        [
          {
            "node": "Generate Signed URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Signed URL": {
      "main": [
        [
          {
            "node": "Generate Timestamp for Expires",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Timestamp for Expires": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "07cb2bc4-2263-489b-b18a-ff4f779a9734",
  "meta": {
    "instanceId": "f5707d3666ba184efe554775a181f51837c332c4fa57af1133598e1ba699e314"
  },
  "id": "jUOJ4Hk7VTEpfGB0",
  "tags": []
}